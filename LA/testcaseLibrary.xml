<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "stax.dtd">
<stax>
	
	<!-- ****************************************************************** -->
  <!--                        bussinessSpace_FVT_OrderItemInst                      -->
  <!--                                                                    -->
  <!--                                                                    -->
  <!-- ****************************************************************** -->

  <function name="busFvt_OrderItemInst" scope="local">
    <function-prolog>
      This function will run the businessSpace instance model test, it will:
		generate an EAR for the build thats passed (the build thats on the target)
		sends some pre bactched events and then the run businessSpace fvt test cases
		
		
		Throws :
		
		MonitorAutoException.OrderItem.AutomationError
		MonitorAutoException.OrderItem.InstallEarError
		MonitorAutoException.OrderItem.GenerateEarError
		MonitorAutoException.OrderItem.SendEventError
    </function-prolog>

    <function-epilog>
      <![CDATA[
<p>This is the OrderItem test function</p>
<p>This function will run the OrderItem automation test </p>
<p>It will do the following:</p>
<ul>
	<li>install an EAR to a monitor installation</li>
	<li>send pre-made batched events</li>
	<li>validate the events were processed and correct values in metric through Junit Java Call<li>	  
</ul>
<p>this is another paragraph...</p>
      ]]>
    </function-epilog>

    <function-map-args>
      <function-required-arg name="target">Hostname/IP address of the target machine</function-required-arg>
	  <function-required-arg name="buildPath">build level to generate EAR for (build that resides on target)</function-required-arg>
      <function-required-arg name="wasHomeDirectory">Location of was directory on target</function-required-arg>
	  <function-required-arg name="wasServerName">Name of the WAS Server monitor profile runs under</function-required-arg>
      <function-required-arg name="profileNameInWas">monitor profile name</function-required-arg>
      <function-required-arg name="isMonSecurity">is Monitor Security enabled true/false</function-required-arg>
	  <!-- function-required-arg name="runPortalDash">on or off selection, will run Portal Dashboard test</function-required-arg-->
	  <!-- function-required-arg name="runBspaceDash">on or off selection, will run Business Space Dashboard Test</function-required-arg-->
	  <function-required-arg name="uninstallModel">Will Uninstall Model at the completion of test</function-required-arg>
	  <!--function-optional-arg name="portalHostname">hostname/ip of the Portal machine</function-optional-arg-->
	  <!--function-optional-arg name="portalWASInstallLocation">Where the WAS running Portal is installed</function-optional-arg-->
	  <!--function-optional-arg name="portalUser">username for Portal user</function-optional-arg-->
	  <!-- function-optional-arg name="portalPass">password for Portal user</function-optional-arg-->
	  <function-optional-arg name="monUser">monitor user for security</function-optional-arg>
	  <function-optional-arg name="monPass">monitor pasword for security</function-optional-arg>
	  <function-optional-arg name="browserSelect">valid values are "Mozilla Firefox" or "Internet Explorer"</function-optional-arg>					
    </function-map-args>
	
    <try>
		
	  <sequence>	  
	  <!-- Local Variables -->	  
      <script>myLogLevel="User7"</script>
	  <script>testFail = 'false'</script>
	  <!-- ************************************************************************* -->
	  <!-- ****************** Model Specific Variables ***************************** -->
	  <!-- ************************************************************************* -->	  
	  <!-- STAX Testcase name i.e direcotry we store it under -->
	  <script>myName="fvt_orderitem"</script>
	  <script>myPIFile="OrderItem_24July2008V1_PI.zip"</script>
	  <script>myApplName='OrderItemApplication'</script>
	  <script>myModelName='OrderItem'</script>
	  <script>myThreadSetting='SerialST'</script>
	  <script>myVersion='20060803000000'</script>
	  <script>fvtEventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>com_OrdBook5_MC_EventFile = 'COMPLETE_OrderBooK5_MC.xml'</script>
	  <script>com_OrdBook5_MC_Count = 5</script>
	  <script>com_OrdMovie4_MC_EventFile = 'COMPLETE_OrderMovie4_MC.xml'</script>
	  <script>com_OrdMovie4_MC_Count = 5</script>
	  <script>ter_MC1_2OrdBook_2Mu_2Mo_MC2_EventFile = 'TERMINATE_MC1_2OrderBook-2Music-2Movie_MC2.xml'</script>
	  <script>ter_MC1_2OrdBook_2Mu_2Mo_MC2_Count = 17</script>
	  <script>ter_MC1_OrdBook_Mu_Mo_EventFile = 'TERMINATE_MC1_OrderBook-Music-Movie.xml'</script>
	  <script>ter_MC1_OrdBook_Mu_Mo_Count = 10</script>
	  <script>ter_MC1_OrdBook_Mu_Mo_MC2_EventFile = 'TERMINATE_MC1_OrderBook-Music-Movie_MC2.xml'</script>
	  <script>ter_MC1_OrdBook_Mu_Mo_MC2_Count = 14</script>
	  <script>ter_OrdBook3_MC_EventFile = 'TERMINATE_OrderBook3_MC.xml'</script>
	  <script>ter_OrdBook3_MC_EventFile_Count = 12</script>	
	  <script>ter_OrdBook_MC1and2_EventFile = 'TERMINATE_OrderBook_MC1and2.xml'</script>
	  <script>ter_OrdBook_MC1and2_EventFile_Count = 7</script>
	  <script>ter_OrdBook_MC2_EventFile = 'TERMINATE_OrderBook_MC2.xml'</script>
	  <script>ter_OrdBook_MC2_EventFile_Count = 7</script>	 
	  <script>ter_OrdBook_MC_EventFile = 'TERMINATE_OrderBook_MC.xml'</script>
	  <script>ter_OrdBook_MC_EventFile_Count = 6</script>	 
	  <script>ter_OrdBook_Mo_MC_EventFile = 'TERMINATE_OrderMovie_MC.xml'</script>
	  <script>ter_OrdBook_Mo_MC_EventFile_Count = 6</script>	 
	  <script>ter_OrdBook_Mu_MC_EventFile = 'TERMINATE_OrderMusic_MC.xml'</script>
	  <script>ter_OrdBook_Mu_MC_EventFile_Count = 6</script>	 	  	  	 	    	  
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <script>earGotInstalled = 'false'</script>
		  	  
	  <!-- Remove the /mnt from the buildPath before using it -->
	  <script>buildPath = buildPath.replace('/mnt','')</script>
	  <log level='myLogLevel'>'The media repository location of build is : %s' % (buildPath)</log>
	
	  <!-- extract Build Selected from Path -->
      <script> 
		split = buildPath.split('CDMON/')
		buildSelected = split[-1] 
	  </script>
	  <!-- determine RELEASE from BuildPath -->
	  <script>split = buildPath.split('monitor_builds/')</script>
	  <script>split2 = split[-1].split('/')</script>	
	  <script>releaseLevel = split2[0]</script>
		  
	
	
	  <!--if expr="releaseLevel == 'MON62.CDMON'">
	 	 <script>portalScript = 'scripts.fvt.portal.instance.AllFvtCase'</script>
	  </if-->
		  
	  <!-- Determine the correct BSpace Script -->
	  <!-- dont know the name for 62 BusSpace script yet, this is MON61.CDMON -->
	  <if expr="releaseLevel == 'MON62.CDMON'">
		  <script>busScript = 'scripts.fvt.busspace.instances.AllFvtCase'</script>
	  </if>
		    
      <!-- Starting the important part -->
      <log level='myLogLevel'>'Starting the %s test' % (myName)</log>		
				 
      <!-- Import the commonLibrary -->		
      <script>libraryLoc="BTT_Sandbox/commonLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.Fvt.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Import rftHelperLibrary.xml --> 
	  <script>libraryLoc="BTT_Sandbox/rftHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.Fvt.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Load the miscHelperLibarary.xml -->
	  <script>libraryLoc="bpm/monitor/miscHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		<throw exception="'MonitorAutoException.Fvt.AutomationError'">'Failed to Import the necessary library %s for this function.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Import the CUSTOM helper library -->
	  <script>libraryLoc="BTT_Sandbox/wasHelperLibrary.xml"</script> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.OrderItem.AutomationError'">'Failed to Import the necessary library %s needed for this function' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Determine the wasprops WC_defaulthost port -->
	  <call function="'wasGetPort'">target,wasHomeDirectory,profileNameInWas,'WC_defaulthost'</call>
	  <script>(callRC,callResult) = STAXResult</script>
	  <if expr="callRC != 0">
          <throw exception="'MonitorAutoException.OrderItem.PortError'">'%s' % (callResult)</throw>
		  <else>
			  <script>hostPort = callResult</script>
		  </else>
      </if>
		  
	  <!-- Resolve the hostname of the media server -->
      <call function="'cafResolveLAVar'">'Config/mediaServer'</call>
      <script>mediaServer = STAXResult</script>
		  
	  <!-- *********************Run RFT Validation********************************************* -->
	  <!-- If runPortalDash = on call mon_runPortalRFTTest -->
	  <!-- if expr="runPortalDash == 'on'">
		 <try>
	       <call function="'mon_callPortalRFT_All'">target,portalHostname,portalWASInstallLocation,releaseLevel,portalUser,portalPass,browserSelect,portalScript</call>
	       <catch exception="'...'" var="eInfo">
		     <throw exception="'MonitorAutoException.OrderItem.PortalDashError'">eInfo</throw>
	       </catch>  
	     </try>  
	  </if-->
	  <!-- If runBspaceDash = on call mon_runBusinessRFTTest -->	  
	  <!-- if expr="runBspaceDash == 'on'"-->
		  <try>
			  <call function="'mon_callBusinessRFT_All'">target,wasHomeDirectory,releaseLevel,isMonSecurity,hostPort,browserSelect,busScript,monUser,monPass</call>
			  <catch exception="'...'" var="eInfo">
				  <throw exception="'MonitorAutoException.OrderItem.BSpaceDashError'">eInfo</throw>
			  </catch>
		  </try>
	  <!-- /if-->
		  
	  <!-- Ideally top level call would like to return nothing...exceptions catch rest -->
			
	  <return>0</return>
	  	
	  </sequence>
		
	  <!-- ################################### Begin exception handlers ###################################################### -->

      <catch exception="'...'" var="eInfo">
		<sequence>
			<script>testFail = 'true'</script>
			<rethrow/>
		</sequence>
      </catch>

      <!-- ################################### End exception handlers ######################################################### -->
	  <!-- Uninstall EAR, IF it got installed in finally block -->
	  <finally>
	    <sequence>
		  <!-- make sure it was installed -->
		  <if expr="earGotInstalled == 'true' and uninstallModel == 'on'">
			 <sequence>
			 <!-- If target is Windows -->
			 
			     <try>
				   <call function="'wasUninstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,myApplName,myModelName,myVersion</call>
				   <catch exception="'...'" var="eInfo">
					  <log level="'error'">'Error uninstalling EAR. May have to manually clean before running another test. Error Info: %s' % (eInfo)</log>
				   </catch>
			     </try>	
		     
			</sequence>  
		  </if>
		  <if expr="testFail == 'true'">
			  <!-- Collect was Runtime logs on Failure -->
			  <call function="'mon_gatherWASRuntimeLogs'">target,wasHomeDirectory,profileNameInWas,'%s_FAIL' % (myName)</call>
		  </if>
        <log level='myLogLevel'>'Ending the %s test' % (myName)</log>  
		</sequence>		  
	  </finally>	
			
    </try>
	  
  </function>
  <!-- ****************************************************************** -->
  <!--                         mon_TestAutoParts_All                      -->
  <!--                                                                    -->
  <!--                                                                    -->
  <!-- ****************************************************************** -->

  <function name="mon_TestAutoParts_All" scope="local">
    <function-prolog>
      This function will run the AutoParts model test, it will:
		generate an EAR for the build thats passed (the build thats on the target)
		sends some pre bactched events
		and validates that the correct values reside in monitor through REST services
		
		Throws :
		
		MonitorAutoException.Autoparts.AutomationError
		MonitorAutoException.Autoparts.InstallEarError
		MonitorAutoException.Autoparts.GenerateEarError
		MonitorAutoException.Autoparts.SendEventError
		MonitorAutoException.Autoparts.ValidateError
		MonitorAutoExcpetion.Autoparts.DashboardError
		
    </function-prolog>

    <function-epilog>
      <![CDATA[
<p>This is the AutoParts test function</p>
<p>This function will run the AutoParts automation test </p>
<p>It will do the following:</p>
<ul>
	<li>install an EAR to a monitor installation</li>
	<li>send pre-made batched events</li>
	<li>validate the events were processed and correct values in metric through Junit Java Call<li>	  
</ul>
<p>this is another paragraph...</p>
      ]]>
    </function-epilog>

    <function-map-args>
      <function-required-arg name="target">Hostname/IP address of the target machine</function-required-arg>
	  <function-required-arg name="buildPath">build level to generate EAR for (build that resides on target)</function-required-arg>
      <function-required-arg name="wasHomeDirectory">Location of was directory on target</function-required-arg>
	  <function-required-arg name="wasServerName">Name of the WAS Server monitor profile runs under</function-required-arg>
      <function-required-arg name="profileNameInWas">monitor profile name</function-required-arg>
	  <function-required-arg name="isMonSecurity">is Monitor Security enabled true/false</function-required-arg>
	  <function-required-arg name="runPortalDash">on or off selection, will run Portal Dashboard test</function-required-arg>
	  <function-required-arg name="runBspaceDash">on or off selection, will run Business Space Dashboard Test</function-required-arg>
	  <function-required-arg name="uninstallModel">Will Uninstall model at completion of test</function-required-arg>
	  <function-optional-arg name="portalHostname">hostname/ip of the Portal machine</function-optional-arg>
	  <function-optional-arg name="portalWASInstallLocation">Where the WAS running Portal is installed</function-optional-arg>
	  <function-optional-arg name="portalUser">username for Portal user</function-optional-arg>
	  <function-optional-arg name="portalPass">password for Portal user</function-optional-arg>
	  <function-optional-arg name="monUser">monitor user for security</function-optional-arg>
	  <function-optional-arg name="monPass">monitor pasword for security</function-optional-arg>
	  <function-optional-arg name="browserSelect">valid values are "Mozilla Firefox" or "Internet Explorer"</function-optional-arg>					
    </function-map-args>
	
    <try>
		
	  <sequence>
		
		  
	  <!-- Local Variables -->	  
      <script>myLogLevel="User7"</script>
	  <script>testFail = 'false'</script>
	  <!-- ****************** Model Specific Variables ***************************** -->	  
	  <!-- STAX Testcase name i.e direcotry we store it under -->
	  <script>myName="autoparts01"</script>
	  <script>myPIFile="AutoPartsRevenuePI_1011.zip"</script>
	  <script>myApplName='AutoPartsRevenueApplication'</script>
	  <script>myModelName='AutoPartsRevenue'</script>
	  <script>myThreadSetting='SerialMT'</script>
	  <script>myVersion='20070527194840'</script>
	  <script>aprilEventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>aprilEventFile = 'AutoParts_April_Data.xml'</script>
	  <script>aprilCount = 16</script>
	  <script>mayEventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>mayEventFile = 'AutoParts_May_Data.xml'</script>
	  <script>mayCount = 16</script>
	  <script>aprilValidPath = '/bpmmedia/monitor_tests/%s/junit' % (myName)</script>
	  <script>aprilValidFile = 'AutoPartsAprilKPIs.class'</script>
	  <script>mayValidPath = '/bpmmedia/monitor_tests/%s/junit' % (myName)</script>
	  <script>mayValidFile = 'AutoPartsMayKPIs.class'</script>
	  <!-- ************************************************************************* -->
	  <script>earGotInstalled = 'false'</script>
		  	
	  <!-- Starting the important part -->
      <log level='myLogLevel'>'Starting the %s test' % (myName)</log>
		  	    
	  <!-- Remove the /mnt from the buildPath before using it -->
	  <script>buildPath = buildPath.replace('/mnt','')</script>
	  <log level='myLogLevel'>'The media repository location of build is : %s' % (buildPath)</log>
	
	  <!-- extract Build Selected from Path -->
      <script> 
		split = buildPath.split('CDMON/')
		buildSelected = split[-1] 
	  </script>
	  <!-- determine RELEASE from BuildPath -->
	  <script>split = buildPath.split('monitor_builds/')</script>
	  <script>split2 = split[-1].split('/')</script>	
	  <script>releaseLevel = split2[0]</script>
		  
	  <!-- Determine the correct Portal script -->
	  <if expr="releaseLevel == 'MON61.CDMON'">
	 	<script>portalScript = 'testcases.models.autoparts.KpiTableViewValidation'</script>
	  </if>
	  <if expr="releaseLevel == 'MON62.CDMON'">
	 	<script>portalScript = 'scripts.portal.bvt.AutoParts'</script>
	  </if> 	  
		
	  <!-- Determine the correct BSpace Script -->
	  <!-- dont know the name for 62 BusSpace script yet, this is MON61.CDMON -->
	  <if expr="releaseLevel == 'MON61.CDMON'">
        <script>busScript = 'scripts.busspace.bvt.AutoParts'</script>	
	  </if>
	  <if expr="releaseLevel == 'MON62.CDMON'">
        <script>busScript = 'scripts.busspace.bvt.AutoParts'</script>	<!-- from DashboardGUi62.jar-->
	  </if>
	  
				 
      <!-- Import the commonLibrary -->		
      <script>libraryLoc="BTT_Sandbox/commonLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.Autoparts.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Load the miscHelperLibarary.xml -->
	  <script>libraryLoc="bpm/monitor/miscHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		<throw exception="'MonitorAutoException.Autoparts.AutomationError'">'Failed to Import the necessary library %s for this function.' % (libraryLoc)</throw>
	  </if>
		 
	  <!-- Import the rftHelperLibrary -->	    
	  <script>libraryLoc="BTT_Sandbox/rftHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.Autoparts.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Import the CUSTOM helper library -->
	  <script>libraryLoc="BTT_Sandbox/wasHelperLibrary.xml"</script> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.AutoParts.AutomationError'">'Failed to Import the necessary library %s needed for this function' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Determine the wasprops WC_defaulthost port -->
	  <call function="'wasGetPort'">target,wasHomeDirectory,profileNameInWas,'WC_defaulthost'</call>
	  <script>(callRC,callResult) = STAXResult</script>
	  <if expr="callRC != 0">
          <throw exception="'MonitorAutoException.AutoParts.PortError'">'%s' % (callResult)</throw>
		  <else>
			  <script>hostPort = callResult</script>
		  </else>
      </if>
		  
	  <!-- Resolve the hostname of the media server -->
      <call function="'cafResolveLAVar'">'Config/mediaServer'</call>
      <script>mediaServer = STAXResult</script>
		  	  
	  <!--******************** Generate EAR Section ****************************** -->
	  <!-- Directory on media Server to check for existing ear -->
	  <script>earCheckDir = '/bpmmedia/monitor_tests/%s/ears/%s' % (myName,buildSelected)</script>
	  <script>earFile = '%sEAR.ear' % (myName)</script>
	  <script>earCheckFull = '%s/%s' % (earCheckDir,earFile)</script>
		   	     
	  <!-- check to see if we have the EAR we need already...if not call generate EAR -->
	  <call function="'cafQueryFSEntry'">mediaServer,earCheckFull</call>
        <script>(callRC,callResult) = STAXResult</script>
        <if expr="callRC != 0">
		  <sequence>
			  <log level='myLogLevel'>'EAR file is needed..calling generate function'</log>
			  <!-- Calling Generate EAR -->
			  <try>	  
				<call function="'mon_GenerateEar_Linux'">target,buildPath,myPIFile,myName</call>
				<catch exception="'...'" var="eInfo">
					<throw exception="'MonitorAutoException.Autoparts.GenerateEarError'">eInfo</throw>
				</catch>
			  </try>
		  </sequence>
		  <else>
			  <log level='myLogLevel'>'EAR file %s for build %s already exists media server' % (earFile,buildSelected)</log>
		  </else>
		</if>
								  
	  <!-- Copy EAR file to the target machine Automation temp dir?-->
	  <script>earCheckDirStrip = earCheckDir.replace('/bpmmedia','')</script>
      <call function="'cafGetMediaFromRepository'">target,earCheckDirStrip,earFile,'STAF','no','','','/bpmmedia'</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
		  <log level="'error'">'Failed to copy the %s file from media Server to Automation Temp Dir on target. Error: %s' % (earFile,callResult)</log>
      </if>
		  
	  <!--******************** Install EAR Section ****************************** -->
	  <try>
		<call function="'wasInstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,AutomationTmpDir,\
			earFile,myApplName,'yes',myModelName,myVersion,myThreadSetting</call>
		<catch exception="'...'" var="eInfo">
			<throw exception="'MonitorAutoException.Autoparts.InstallEarError'">eInfo</throw>
		</catch>
	  </try>	 
	  <!-- Mark EAR installed so we can uninstall in case of any other error -->
	  <script>earGotInstalled = 'true'</script>
		  
	  <!--******************** Send April Events ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',aprilEventPath,aprilEventFile,'batch',aprilCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.Autoparts.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30,000 milliseconds'</log>
      </if>
		  
	  <!--******************** Validate April Events Section ********************************** -->
	  <try>
	    <call function="'monValidateJunitClass'">target,wasHomeDirectory,profileNameInWas,aprilValidPath,aprilValidFile,myVersion</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.Autoparts.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>
		    	  
	  <!-- ****************** Send May Events ************************************************* -->
	   <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',mayEventPath,mayEventFile,'batch',mayCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.Autoparts.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30,000 milliseconds'</log>
      </if>
		  
	  <!-- ******************* Validate May Events ******************************************** -->
	  <try>
	    <call function="'monValidateJunitClass'">target,wasHomeDirectory,profileNameInWas,mayValidPath,mayValidFile,myVersion</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.Autoparts.ValidateError'">eInfo</throw>
	    </catch>  
	  </try> 
		    
	  <!-- *********************Run RFT Validation********************************************* -->
	  <!-- If runPortalDash = on call mon_runPortalRFTTest -->
	  <if expr="runPortalDash == 'on'">
		 <try>
	       <call function="'mon_callPortalRFT_All'">target,portalHostname,portalWASInstallLocation,releaseLevel,portalUser,portalPass,browserSelect,portalScript</call>
	       <catch exception="'...'" var="eInfo">
		     <throw exception="'MonitorAutoException.Autoparts.PortalDashError'">eInfo</throw>
	       </catch>  
	     </try>  
	  </if>
	  <!-- If runBspaceDash = on call mon_runBusinessRFTTest -->	  
	  <if expr="runBspaceDash == 'on'">
		  <try>
			  <call function="'mon_callBusinessRFT_All'">target,wasHomeDirectory,releaseLevel,isMonSecurity,hostPort,browserSelect,busScript,monUser,monPass</call>
			  <catch exception="'...'" var="eInfo">
				  <throw exception="'MonitorAutoException.AutoParts.BSpaceDashError'">eInfo</throw>
			  </catch>
		  </try>
	  </if>
	  <!-- Ideally top level call would like to return nothing...exceptions catch rest -->
			
	  <return>0</return>
	  	
	  </sequence>
		
	  <!-- ################################### Begin exception handlers ###################################################### -->

      <catch exception="'...'" var="eInfo">
		<sequence>
			<script>testFail = 'true'</script>
			<rethrow/>
		</sequence>
      </catch>

      <!-- ################################### End exception handlers ######################################################### -->
	  <!-- Uninstall EAR, IF it got installed in finally block -->
	  <finally>
	    <sequence>
		  <!-- make sure it was installed -->
		  <if expr="earGotInstalled == 'true' and uninstallModel == 'on'">
			 <sequence>
			 <!-- If target is Windows -->  
			     <try>
				   <call function="'wasUninstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,myApplName,myModelName,myVersion</call>
				   <catch exception="'...'" var="eInfo">
					  <log level="'error'">'Error uninstalling EAR. May have to manually clean before running another test. Error Info: %s' % (eInfo)</log>
				   </catch>
			     </try>	
			 </sequence>  
		  </if>
		  <if expr="testFail == 'true'">
			  <!-- Collect was Runtime logs on Failure -->
			  <call function="'mon_gatherWASRuntimeLogs'">target,wasHomeDirectory,profileNameInWas,'%s_FAIL' % (myName)</call>
		  </if>
        <log level='myLogLevel'>'Ending the %s test' % (myName)</log>  
		</sequence>		  
	  </finally>	
			
    </try>
	  
  </function>
	
  <!-- ****************************************************************** -->
  <!--                      mon_TestBeverageMonitor_All                   -->
  <!--                                                                    -->
  <!--                                                                    -->
  <!-- ****************************************************************** -->

  <function name="mon_TestBeverageMonitor_All" scope="local">
    <function-prolog>
     This function will run the BeverageMonitor model test, it will:
		generate an EAR for the build thats passed (the build thats on the target)
		sends some pre bactched events
		and validates that the correct values reside in monitor through REST services
		
		Throws :
		
		MonitorAutoException.Bevmon.AutomationError
		MonitorAutoException.Bevmon.InstallEarError
		MonitorAutoException.Bevmon.GenerateEarError
		MonitorAutoException.Bevmon.SendEventError
		MonitorAutoException.Bevmon.ValidateError
		MonitorAutoExcpetion.Bevmon.DashboardError
    </function-prolog>

    <function-epilog>
      <![CDATA[
<p>This is the BeverageMonitor test function</p>
<p>This function will run the BeverageMonitor automation test </p>
<p>It will do the following:</p>
<ul>
	<li>install an EAR to a monitor installation</li>
	<li>send pre-made batched events</li>
	<li>validate the events were processed and correct values in metric through REST Services<li>	  
</ul>
<p>this is another paragraph...</p>
      ]]>
    </function-epilog>

    <function-map-args>
      <function-required-arg name="target">Hostname/IP address of the target machine</function-required-arg>
	  <function-required-arg name="buildPath">build level to generate EAR for (build that resides on target)</function-required-arg>
      <function-required-arg name="wasHomeDirectory">Location of was directory on target</function-required-arg>
	  <function-required-arg name="wasServerName">Name of the WAS Server monitor profile runs under</function-required-arg>
      <function-required-arg name="profileNameInWas">monitor profile name</function-required-arg>
	  <function-required-arg name="isMonSecurity">is Monitor Security enabled true/false</function-required-arg>
	  <function-required-arg name="runPortalDash">on or off selection, will run Portal Dashboard test</function-required-arg>
	  <function-required-arg name="runBspaceDash">on or off selection, will run Business Space Dashboard Test</function-required-arg>
	  <function-required-arg name="uninstallModel">Will Uninstall Model at the completion of test</function-required-arg>
	  <function-optional-arg name="portalHostname">hostname/ip of the Portal machine</function-optional-arg>
	  <function-optional-arg name="portalWASInstallLocation">Where the WAS running Portal is installed</function-optional-arg>
	  <function-optional-arg name="portalUser">username for Portal user</function-optional-arg>
	  <function-optional-arg name="portalPass">password for Portal user</function-optional-arg>
	  <function-optional-arg name="monUser">monitor user for security</function-optional-arg>
	  <function-optional-arg name="monPass">monitor pasword for security</function-optional-arg>
	  <function-optional-arg name="browserSelect">valid values are "Mozilla Firefox" or "Internet Explorer"</function-optional-arg>				
    </function-map-args>
	
    <try>
		
	  <sequence>
	  <!-- Local Variables -->	  
      <script>myLogLevel="User7"</script>
	  <script>testFail = 'false'</script>
	  <!-- ****************** Model Specific Variables ***************************** -->	  
	  <!-- STAX Testcase name i.e direcotry we store it under -->
	  <script>myName="bevmon01"</script>
	  <script>myPIFile="BeverageMonitorPI_1119.zip"</script>
	  <script>myApplName='BeverageBusinessApplication'</script>
	  <script>myModelName='BeverageBusinessMonitor'</script>
	  <script>myThreadSetting='SerialMT'</script>
	  <script>myVersion='20070514101500'</script>
	  <script>bev001EventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>bev001EventFile = 'BevMon_001.xml'</script>
	  <script>bev001Count = 1</script>
	  <script>bev001ValidName = 'ValidateBeverageMon'</script>
	  <!-- ************************************************************************* -->
	  <script>earGotInstalled = 'false'</script>
		  	  
	  <!-- Remove the /mnt from the buildPath before using it -->
	  <script>buildPath = buildPath.replace('/mnt','')</script>
	  <log level='myLogLevel'>'The media repository location of build is : %s' % (buildPath)</log>
	
	  <!-- extract Build Selected from Path -->
      <script> 
		split = buildPath.split('CDMON/')
		buildSelected = split[-1] 
	  </script>
	  <!-- determine RELEASE from BuildPath -->
	  <script>split = buildPath.split('monitor_builds/')</script>
	  <script>split2 = split[-1].split('/')</script>	
	  <script>releaseLevel = split2[0]</script>
		  
	  <!-- Determine the correct Portal script -->
	  <if expr="releaseLevel == 'MON61.CDMON'">
	 	<script>portalScript = 'testcases.models.beverage.InstanceMetricValidation'</script>
	  </if>
	  <if expr="releaseLevel == 'MON62.CDMON'">
	 	<script>portalScript = 'scripts.portal.bvt.BeverageBusiness'</script>
	  </if>
		  
	  <!-- Determine the correct BSpace Script -->
	  <!-- dont know the name for 62 BusSpace script yet, this is MON61.CDMON -->
	  <if expr="releaseLevel == 'MON61.CDMON'">
		  <script>busScript = 'scripts.busspace.bvt.BeverageBusiness'</script>
	  </if>
	  <if expr="releaseLevel == 'MON62.CDMON'">
		  <script>busScript = 'scripts.busspace.bvt.BeverageBusiness'</script>
	  </if>
		      
      <!-- Starting the important part -->
      <log level='myLogLevel'>'Starting the %s test' % (myName)</log>		
				 
      <!-- Import the commonLibrary -->		
      <script>libraryLoc="BTT_Sandbox/commonLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.Bevmon.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
	
	  <!-- Import the rftHelper Library -->	  	  
	  <script>libraryLoc="BTT_Sandbox/rftHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>	 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.Bevmon.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Load the miscHelperLibarary.xml -->
	  <script>libraryLoc="bpm/monitor/miscHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>	 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		<throw exception="'MonitorAutoException.Bevmon.AutomationError'">'Failed to Import the necessary library %s for this function.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Import the CUSTOM helper library -->
	  <script>libraryLoc="BTT_Sandbox/wasHelperLibrary.xml"</script> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.Bevmon.AutomationError'">'Failed to Import the necessary library %s needed for this function' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Determine the wasprops WC_defaulthost port -->
	  <call function="'wasGetPort'">target,wasHomeDirectory,profileNameInWas,'WC_defaulthost'</call>
	  <script>(callRC,callResult) = STAXResult</script>
	  <if expr="callRC != 0">
          <throw exception="'MonitorAutoException.Bevmon.PortError'">'%s' % (callResult)</throw>
		  <else>
			  <script>hostPort = callResult</script>
		  </else>
      </if>
		  
	  <!-- Resolve the hostname of the media server -->
      <call function="'cafResolveLAVar'">'Config/mediaServer'</call>
      <script>mediaServer = STAXResult</script>
		  
	  <!--******************** Generate EAR Section ****************************** -->
		  
	  <!-- Directory on media Server to check for existing ear -->
	  <script>earCheckDir = '/bpmmedia/monitor_tests/%s/ears/%s' % (myName,buildSelected)</script>
	  <script>earFile = '%sEAR.ear' % (myName)</script>
	  <script>earCheckFull = '%s/%s' % (earCheckDir,earFile)</script>
		   	     
	  <!-- check to see if we have the EAR we need already...if not call generate EAR -->
	  <call function="'cafQueryFSEntry'">mediaServer,earCheckFull</call>
        <script>(callRC,callResult) = STAXResult</script>
        <if expr="callRC != 0">
		  <sequence>
			  <log level='myLogLevel'>'EAR file is needed..calling generate function'</log>
			  <!-- Calling Generate EAR -->
			  <try>	  
				<call function="'mon_GenerateEar_Linux'">target,buildPath,myPIFile,myName</call>
				<catch exception="'...'" var="eInfo">
					<throw exception="'MonitorAutoException.Bevmon.GenerateEarError'">eInfo</throw>
				</catch>
			  </try>
		  </sequence>
		  <else>
			  <log level='myLogLevel'>'EAR file %s for build %s already exists media server' % (earFile,buildSelected)</log>
		  </else>
		</if>
								  
	  <!-- Copy EAR file to the target machine Automation temp dir?-->
	  <script>earCheckDirStrip = earCheckDir.replace('/bpmmedia','')</script>
      <call function="'cafGetMediaFromRepository'">target,earCheckDirStrip,earFile,'STAF','no','','','/bpmmedia'</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
		  <log level="'error'">'Failed to copy the %s file from media Server to Automation Temp Dir on target. Error: %s' % (earFile,callResult)</log>
      </if>
		  
	 
	  <!--******************** Install EAR Section ****************************** -->
	  <try>
		<call function="'wasInstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,AutomationTmpDir,\
			earFile,myApplName,'yes',myModelName,myVersion,myThreadSetting</call>
		<catch exception="'...'" var="eInfo">
			<throw exception="'MonitorAutoException.Bevmon.InstallEarError'">eInfo</throw>
		</catch>
	  </try>		   
	  
	  <!-- Mark EAR installed so we can uninstall in case of any other error -->
	  <script>earGotInstalled = 'true'</script>
		  
	  <!--******************** Send BevMon_001 Event ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',bev001EventPath,bev001EventFile,'single',bev001Count</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.Bevmon.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30,000 milliseconds'</log>
      </if>
	  <!--******************** Validate BevMon_001 Section ********************************** -->
	  <try>
	    <call function="'monValidateRest'">target,wasHomeDirectory,profileNameInWas,bev001ValidName,myVersion</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.Bevmon.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	 
	  <!-- *********************Run RFT Validation********************************************* -->
	  <!-- If runPortalDash = on call mon_runPortalRFTTest -->
	  <if expr="runPortalDash == 'on'">
		 <try>
	       <call function="'mon_callPortalRFT_All'">target,portalHostname,portalWASInstallLocation,releaseLevel,portalUser,portalPass,browserSelect,portalScript</call>
	       <catch exception="'...'" var="eInfo">
		     <throw exception="'MonitorAutoException.Bevmon.PortalDashError'">eInfo</throw>
	       </catch>  
	     </try>  
	  </if>
	  <!-- If runBspaceDash = on call mon_runBusinessRFTTest -->	  
	  <if expr="runBspaceDash == 'on'">
		  <try>
			  <call function="'mon_callBusinessRFT_All'">target,wasHomeDirectory,releaseLevel,isMonSecurity,hostPort,browserSelect,busScript,monUser,monPass</call>
			  <catch exception="'...'" var="eInfo">
				  <throw exception="'MonitorAutoException.Bevmon.BSpaceDashError'">eInfo</throw>
			  </catch>
		  </try>
	  </if>
		  
	  <!-- Ideally top level call would like to return nothing...exceptions catch rest -->
			
	  <return>0</return>
	  	
	  </sequence>
		
	  <!-- ################################### Begin exception handlers ###################################################### -->

      <catch exception="'...'" var="eInfo">
		<sequence>
			<script>testFail = 'true'</script>
			<rethrow/>
		</sequence>
      </catch>

      <!-- ################################### End exception handlers ######################################################### -->
	  
	  <!-- Uninstall EAR, IF it got installed in finally block -->
	  <finally>
	    <sequence>
		  <!-- make sure it was installed -->
		  <if expr="earGotInstalled == 'true' and uninstallModel == 'on'">
			 <sequence>
			 <!-- If target is Windows -->
			     <try>
				   <call function="'wasUninstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,myApplName,myModelName,myVersion</call>
				   <catch exception="'...'" var="eInfo">
					  <log level="'error'">'Error uninstalling EAR. May have to manually clean before running another test. Error Info: %s' % (eInfo)</log>
				   </catch>
			     </try>	
			</sequence>  
		  </if>
		  <if expr="testFail == 'true'">
			  <!-- Collect was Runtime logs on Failure -->
			  <call function="'mon_gatherWASRuntimeLogs'">target,wasHomeDirectory,profileNameInWas,'%s_FAIL' % (myName)</call>
		  </if>
	      <log level='myLogLevel'>'Ending the %s test' % (myName)</log>  
		</sequence>		  
	  </finally>	
			
    </try>
  </function>
	
  <!-- ****************************************************************** -->
  <!--                      mon_TestClaimProcess_All                      -->
  <!--                                                                    -->
  <!--                                                                    -->
  <!-- ****************************************************************** -->

  <function name="mon_TestClaimProcess_All" scope="local">
    <function-prolog>
      This function will run the ClaimProcessingTracker model test, it will:
		generate an EAR for the build thats passed (the build thats on the target)
		sends some pre bactched events
		and validates that the correct values reside in monitor through REST services
		
		Throws :
		
		MonitorAutoException.ClaimProc.AutomationError
		MonitorAutoException.ClaimProc.InstallEarError
		MonitorAutoException.ClaimProc.GenerateEarError
		MonitorAutoException.ClaimProc.SendEventError
		MonitorAutoException.ClaimProc.ValidateError
		MonitorAutoExcpetion.ClaimProc.DashboardError
		
    </function-prolog>

    <function-epilog>
      <![CDATA[
<p>This is the ClaimProcessTracker test function</p>
<p>This function will run the ClaimProcessTracker automation test </p>
<p>It will do the following:</p>
<ul>
	<li>install an EAR to a monitor installation</li>
	<li>send pre-made batched events</li>
	<li>validate the events were processed and correct values in metric through REST Services<li>	  
</ul>
<p>this is another paragraph...</p>
      ]]>
    </function-epilog>

    <function-map-args>
      <function-required-arg name="target">Hostname/IP address of the target machine</function-required-arg>
	  <function-required-arg name="buildPath">build level to generate EAR for (build that resides on target)</function-required-arg>
      <function-required-arg name="wasHomeDirectory">Location of was directory on target</function-required-arg>
	  <function-required-arg name="wasServerName">Name of the WAS Server monitor profile runs under</function-required-arg>
      <function-required-arg name="profileNameInWas">monitor profile name</function-required-arg>
	  <function-required-arg name="isMonSecurity">is Monitor Security enabled true/false</function-required-arg>
	  <function-required-arg name="runPortalDash">on or off selection, will run Portal Dashboard test</function-required-arg>
	  <function-required-arg name="runBspaceDash">on or off selection, will run Business Space Dashboard Test</function-required-arg>
	  <function-required-arg name="uninstallModel">Will Uninstall Model at the completion of test</function-required-arg>
	  <function-optional-arg name="portalHostname">hostname/ip of the Portal machine</function-optional-arg>
	  <function-optional-arg name="portalWASInstallLocation">Where the WAS running Portal is installed</function-optional-arg>
	  <function-optional-arg name="portalUser">username for Portal user</function-optional-arg>
	  <function-optional-arg name="portalPass">password for Portal user</function-optional-arg>
	  <function-optional-arg name="monUser">monitor user for security</function-optional-arg>
	  <function-optional-arg name="monPass">monitor pasword for security</function-optional-arg>
	  <function-optional-arg name="browserSelect">valid values are "Mozilla Firefox" or "Internet Explorer"</function-optional-arg>				
    </function-map-args>
	
    <try>
		
	  <sequence>  
	  <!-- Local Variables -->	  
      <script>myLogLevel="User7"</script>
	  <script>testFail = 'false'</script>
	  <!-- ************************************************************************* -->
	  <!-- ****************** Model Specific Variables ***************************** -->
	  <!-- ************************************************************************* -->	  
	  <!-- STAX Testcase name i.e direcotry we store it under -->
	  <script>myName="claimproc01"</script>
	  <script>myPIFile="ClaimProcessingTrackerPI_0906.zip"</script>
	  <script>myApplName='ClaimProcessingTracker'</script>
	  <script>myModelName='ClaimProcessingTracker'</script>
	  <script>myThreadSetting='SerialMT'</script>
	  <script>myVersion='20070514081855'</script>
	  <script>claimEventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>startEventFile = 'startClaim.xml'</script>
	  <script>startCount = 1</script>
	  <script>finishEventFile = 'finishClaim.xml'</script>
	  <script>finishCount = 1</script>
	  <script>claimValidName = 'ValidateClaimProcessingTracker'</script>
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <script>earGotInstalled = 'false'</script>
		  	  
	  <!-- Remove the /mnt from the buildPath before using it -->
	  <script>buildPath = buildPath.replace('/mnt','')</script>
	  <log level='myLogLevel'>'The media repository location of build is : %s' % (buildPath)</log>
	
	  <!-- extract Build Selected from Path -->
      <script> 
		split = buildPath.split('CDMON/')
		buildSelected = split[-1] 
	  </script>
	  <!-- determine RELEASE from BuildPath -->
	  <script>split = buildPath.split('monitor_builds/')</script>
	  <script>split2 = split[-1].split('/')</script>	
	  <script>releaseLevel = split2[0]</script>
		  
	  <!-- Determine the correct Portal script -->
	  <if expr="releaseLevel == 'MON61.CDMON'">
	 	<script>portalScript = 'testcases.models.claimproc.InstanceMetricValidation'</script>
	  </if>
	  <if expr="releaseLevel == 'MON62.CDMON'">
	 	<script>portalScript = 'scripts.portal.bvt.ClaimProcessingTracker'</script>
	  </if>
	
	  <!-- Determine the correct BSpace Script -->
	  <!-- dont know the name for 62 BusSpace script yet, this is MON61.CDMON -->
	  <if expr="releaseLevel == 'MON61.CDMON'">
		  <script>busScript = 'scripts.busspace.bvt.ClaimProcessingTracker'</script>
	  </if>
	  <if expr="releaseLevel == 'MON62.CDMON'">
		  <script>busScript = 'scripts.busspace.bvt.ClaimProcessingTracker'</script>
	  </if>	  
		    
      <!-- Starting the important part -->
      <log level='myLogLevel'>'Starting the %s test' % (myName)</log>		
				 
      <!-- Import the commonLibrary -->		
      <script>libraryLoc="BTT_Sandbox/commonLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.ClaimProc.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
	
	  <!-- Import rftHelperLibrary.xml -->	  	  
	  <script>libraryLoc="BTT_Sandbox/rftHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.ClaimProc.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Load the miscHelperLibarary.xml -->
	  <script>libraryLoc="bpm/monitor/miscHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		<throw exception="'MonitorAutoException.ClaimProc.AutomationError'">'Failed to Import the necessary library %s for this function.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Import the CUSTOM helper library -->
	  <script>libraryLoc="BTT_Sandbox/wasHelperLibrary.xml"</script> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.ClaimProc.AutomationError'">'Failed to Import the necessary library %s needed for this function' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Determine the wasprops WC_defaulthost port -->
	  <call function="'wasGetPort'">target,wasHomeDirectory,profileNameInWas,'WC_defaulthost'</call>
	  <script>(callRC,callResult) = STAXResult</script>
	  <if expr="callRC != 0">
          <throw exception="'MonitorAutoException.ClaimProc.PortError'">'%s' % (callResult)</throw>
		  <else>
			  <script>hostPort = callResult</script>
		  </else>
      </if>
		  
	  <!-- Resolve the hostname of the media server -->
      <call function="'cafResolveLAVar'">'Config/mediaServer'</call>
      <script>mediaServer = STAXResult</script>
		  
	  <!--******************** Generate EAR Section ****************************** -->
		  
	  <!-- Directory on media Server to check for existing ear -->
	  <script>earCheckDir = '/bpmmedia/monitor_tests/%s/ears/%s' % (myName,buildSelected)</script>
	  <script>earFile = '%sEAR.ear' % (myName)</script>
	  <script>earCheckFull = '%s/%s' % (earCheckDir,earFile)</script>
		   	     
	  <!-- check to see if we have the EAR we need already...if not call generate EAR -->
	  <call function="'cafQueryFSEntry'">mediaServer,earCheckFull</call>
        <script>(callRC,callResult) = STAXResult</script>
        <if expr="callRC != 0">
		  <sequence>
			  <log level='myLogLevel'>'EAR file is needed..calling generate function'</log>
			  <!-- Calling Generate EAR -->
			  <try>	  
				<call function="'mon_GenerateEar_Linux'">target,buildPath,myPIFile,myName</call>
				<catch exception="'...'" var="eInfo">
					<throw exception="'MonitorAutoException.ClaimProc.GenerateEarError'">eInfo</throw>
				</catch>
			  </try>
		  </sequence>
		  <else>
			  <log level='myLogLevel'>'EAR file %s for build %s already exists media server' % (earFile,buildSelected)</log>
		  </else>
		</if>
								  
	  <!-- Copy EAR file to the target machine Automation temp dir?-->
	  <script>earCheckDirStrip = earCheckDir.replace('/bpmmedia','')</script>
      <call function="'cafGetMediaFromRepository'">target,earCheckDirStrip,earFile,'STAF','no','','','/bpmmedia'</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
		  <log level="'error'">'Failed to copy the %s file from media Server to Automation Temp Dir on target. Error: %s' % (earFile,callResult)</log>
      </if>
		  
	 
	  <!--******************** Install EAR Section ****************************** -->
	  <try>
		<call function="'wasInstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,AutomationTmpDir,\
			earFile,myApplName,'yes',myModelName,myVersion,myThreadSetting</call>
		<catch exception="'...'" var="eInfo">
			<throw exception="'MonitorAutoException.ClaimProc.InstallEarError'">eInfo</throw>
		</catch>
	  </try>	
	  
	  <!-- Mark EAR installed so we can uninstall in case of any other error -->
	  <script>earGotInstalled = 'true'</script>
		  
	  <!--******************** Send startClaim Event ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',claimEventPath,startEventFile,'single',startCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.ClaimProc.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30,000 milliseconds'</log>
      </if>
		  
	  <!--******************** Send finishClaim Event ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',claimEventPath,finishEventFile,'single',finishCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.ClaimProc.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30,000 milliseconds'</log>
      </if>
		  
	  <!--******************** Validate ClaimProcessTracker Section ********************************** -->
	  <try>
	    <call function="'monValidateRest'">target,wasHomeDirectory,profileNameInWas,claimValidName,myVersion</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.ClaimProc.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	 
	  <!-- *********************Run RFT Validation********************************************* -->
	  <!-- If runPortalDash = on call mon_runPortalRFTTest -->
	  <if expr="runPortalDash == 'on'">
		 <try>
	       <call function="'mon_callPortalRFT_All'">target,portalHostname,portalWASInstallLocation,releaseLevel,portalUser,portalPass,browserSelect,portalScript</call>
	       <catch exception="'...'" var="eInfo">
		     <throw exception="'MonitorAutoException.ClaimProc.PortalDashError'">eInfo</throw>
	       </catch>  
	     </try>  
	  </if>
	  <!-- If runBspaceDash = on call mon_runBusinessRFTTest -->	  
	  <if expr="runBspaceDash == 'on'">
		  <try>
			  <call function="'mon_callBusinessRFT_All'">target,wasHomeDirectory,releaseLevel,isMonSecurity,hostPort,browserSelect,busScript,monUser,monPass</call>
			  <catch exception="'...'" var="eInfo">
				  <throw exception="'MonitorAutoException.ClaimProc.BSpaceDashError'">eInfo</throw>
			  </catch>
		  </try>
	  </if>
	  <!-- Ideally top level call would like to return nothing...exceptions catch rest -->
			
	  <return>0</return>
	  	
	  </sequence>
		
	  <!-- ################################### Begin exception handlers ###################################################### -->

     <catch exception="'...'" var="eInfo">
		<sequence>
			<script>testFail = 'true'</script>
			<rethrow/>
		</sequence>
      </catch>

      <!-- ################################### End exception handlers ######################################################### -->
	
	  <!-- Uninstall EAR, IF it got installed in finally block -->
	  <finally>
	    <sequence>
		  <!-- make sure it was installed -->
		  <if expr="earGotInstalled == 'true' and uninstallModel == 'on'">
			 <sequence>
			 <!-- If target is Windows -->
			 <try>
			   <call function="'wasUninstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,myApplName,myModelName,myVersion</call>
			   <catch exception="'...'" var="eInfo">
				  <log level="'error'">'Error uninstalling EAR. May have to manually clean before running another test. Error Info: %s' % (eInfo)</log>
			   </catch>
			 </try>	 
			</sequence>  
		  </if>
		  <if expr="testFail == 'true'">
			  <!-- Collect was Runtime logs on Failure -->
			  <call function="'mon_gatherWASRuntimeLogs'">target,wasHomeDirectory,profileNameInWas,'%s_FAIL' % (myName)</call>
		  </if>
	      <log level='myLogLevel'>'Ending the %s test' % (myName)</log>  
		</sequence>		  
	  </finally>			
			
    </try>
  </function>
	
  <!-- ****************************************************************** -->
  <!--                         mon_TestOrderItem_All                      -->
  <!--                                                                    -->
  <!--                                                                    -->
  <!-- ****************************************************************** -->

  <function name="mon_TestOrderItem_All" scope="local">
    <function-prolog>
      This function will run the ClaimProcessingTracker model test, it will:
		generate an EAR for the build thats passed (the build thats on the target)
		sends some pre bactched events
		and validates that the correct values reside in monitor through REST services
		
		Throws :
		
		MonitorAutoException.OrderItem.AutomationError
		MonitorAutoException.OrderItem.InstallEarError
		MonitorAutoException.OrderItem.GenerateEarError
		MonitorAutoException.OrderItem.SendEventError
		MonitorAutoException.OrderItem.ValidateError
		MonitorAutoExcpetion.OrderItem.DashboardError
    </function-prolog>

    <function-epilog>
      <![CDATA[
<p>This is the OrderItem test function</p>
<p>This function will run the OrderItem automation test </p>
<p>It will do the following:</p>
<ul>
	<li>install an EAR to a monitor installation</li>
	<li>send pre-made batched events</li>
	<li>validate the events were processed and correct values in metric through Junit Java Call<li>	  
</ul>
<p>this is another paragraph...</p>
      ]]>
    </function-epilog>

    <function-map-args>
      <function-required-arg name="target">Hostname/IP address of the target machine</function-required-arg>
	  <function-required-arg name="buildPath">build level to generate EAR for (build that resides on target)</function-required-arg>
      <function-required-arg name="wasHomeDirectory">Location of was directory on target</function-required-arg>
	  <function-required-arg name="wasServerName">Name of the WAS Server monitor profile runs under</function-required-arg>
      <function-required-arg name="profileNameInWas">monitor profile name</function-required-arg>
	  <function-required-arg name="isMonSecurity">is Monitor Security enabled true/false</function-required-arg>
	  <function-required-arg name="runPortalDash">on or off selection, will run Portal Dashboard test</function-required-arg>
	  <function-required-arg name="runBspaceDash">on or off selection, will run Business Space Dashboard Test</function-required-arg>
	  <function-required-arg name="uninstallModel">Will Uninstall Model at the completion of test</function-required-arg>
	  <function-optional-arg name="portalHostname">hostname/ip of the Portal machine</function-optional-arg>
	  <function-optional-arg name="portalWASInstallLocation">Where the WAS running Portal is installed</function-optional-arg>
	  <function-optional-arg name="portalUser">username for Portal user</function-optional-arg>
	  <function-optional-arg name="portalPass">password for Portal user</function-optional-arg>
	  <function-optional-arg name="monUser">monitor user for security</function-optional-arg>
	  <function-optional-arg name="monPass">monitor pasword for security</function-optional-arg>
	  <function-optional-arg name="browserSelect">valid values are "Mozilla Firefox" or "Internet Explorer"</function-optional-arg>					
    </function-map-args>
	
    <try>
		
	  <sequence>	  
	  <!-- Local Variables -->	  
      <script>myLogLevel="User7"</script>
	  <script>testFail = 'false'</script>
	  <!-- ************************************************************************* -->
	  <!-- ****************** Model Specific Variables ***************************** -->
	  <!-- ************************************************************************* -->	  
	  <!-- STAX Testcase name i.e direcotry we store it under -->
	  <script>myName="orderitem01"</script>
	  <script>myPIFile="OrderItemV1_17Oct2007.zip"</script>
	  <script>myApplName='OrderItemApplication'</script>
	  <script>myModelName='OrderItem'</script>
	  <script>myThreadSetting='SerialST'</script>
	  <script>myVersion='20060803000000'</script>
	  <script>oneEventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>oneEventFile = 'OrderEvents1.xml'</script>
	  <script>oneCount = 6</script>
	  <script>operValidPath = '/bpmmedia/monitor_tests/%s/junit' % (myName)</script>
	  <script>operValidFile = 'OperatorKPIs.class'</script>
	  <script>funcValidPath = '/bpmmedia/monitor_tests/%s/junit' % (myName)</script>
	  <script>funcValidFile = 'FunctionKPIs.class'</script>
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <script>earGotInstalled = 'false'</script>
		  	  
	  <!-- Remove the /mnt from the buildPath before using it -->
	  <script>buildPath = buildPath.replace('/mnt','')</script>
	  <log level='myLogLevel'>'The media repository location of build is : %s' % (buildPath)</log>
	
	  <!-- extract Build Selected from Path -->
      <script> 
		split = buildPath.split('CDMON/')
		buildSelected = split[-1] 
	  </script>
	  <!-- determine RELEASE from BuildPath -->
	  <script>split = buildPath.split('monitor_builds/')</script>
	  <script>split2 = split[-1].split('/')</script>	
	  <script>releaseLevel = split2[0]</script>
		  
	  <!-- Determine the correct Portal script -->
	  <if expr="releaseLevel == 'MON61.CDMON'">
	 	<script>portalScript = 'testcases.models.orderitem.KpiTableViewValidation'</script>
	  </if>
	  <if expr="releaseLevel == 'MON62.CDMON'">
	 	 <script>portalScript = 'scripts.portal.bvt.OrderItem'</script>
	  </if>
		  
	  <!-- Determine the correct BSpace Script -->
	  <!-- dont know the name for 62 BusSpace script yet, this is MON61.CDMON -->
	  <if expr="releaseLevel == 'MON61.CDMON'">
		  <script>busScript = 'scripts.busspace.bvt.OrderItem'</script>
	  </if>
	  <if expr="releaseLevel == 'MON62.CDMON'">
		  <script>busScript = 'scripts.busspace.bvt.OrderItem'</script>
	  </if>
		    
      <!-- Starting the important part -->
      <log level='myLogLevel'>'Starting the %s test' % (myName)</log>		
				 
      <!-- Import the commonLibrary -->		
      <script>libraryLoc="BTT_Sandbox/commonLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.OrderItem.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Import rftHelperLibrary.xml --> 
	  <script>libraryLoc="BTT_Sandbox/rftHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.OrderItem.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Load the miscHelperLibarary.xml -->
	  <script>libraryLoc="bpm/monitor/miscHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		<throw exception="'MonitorAutoException.OrderItem.AutomationError'">'Failed to Import the necessary library %s for this function.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Import the CUSTOM helper library -->
	  <script>libraryLoc="BTT_Sandbox/wasHelperLibrary.xml"</script> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.OrderItem.AutomationError'">'Failed to Import the necessary library %s needed for this function' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Determine the wasprops WC_defaulthost port -->
	  <call function="'wasGetPort'">target,wasHomeDirectory,profileNameInWas,'WC_defaulthost'</call>
	  <script>(callRC,callResult) = STAXResult</script>
	  <if expr="callRC != 0">
          <throw exception="'MonitorAutoException.OrderItem.PortError'">'%s' % (callResult)</throw>
		  <else>
			  <script>hostPort = callResult</script>
		  </else>
      </if>
		  
	  <!-- Resolve the hostname of the media server -->
      <call function="'cafResolveLAVar'">'Config/mediaServer'</call>
      <script>mediaServer = STAXResult</script>
		  
	  <!--******************** Generate EAR Section ****************************** -->
		  
	  <!-- Directory on media Server to check for existing ear -->
	  <script>earCheckDir = '/bpmmedia/monitor_tests/%s/ears/%s' % (myName,buildSelected)</script>
	  <script>earFile = '%sEAR.ear' % (myName)</script>
	  <script>earCheckFull = '%s/%s' % (earCheckDir,earFile)</script>
		   	     
	  <!-- check to see if we have the EAR we need already...if not call generate EAR -->
	  <call function="'cafQueryFSEntry'">mediaServer,earCheckFull</call>
        <script>(callRC,callResult) = STAXResult</script>
        <if expr="callRC != 0">
		  <sequence>
			  <log level='myLogLevel'>'EAR file is needed..calling generate function'</log>
			  <!-- Calling Generate EAR -->
			  <try>	  
				<call function="'mon_GenerateEar_Linux'">target,buildPath,myPIFile,myName</call>
				<catch exception="'...'" var="eInfo">
					<throw exception="'MonitorAutoException.OrderItem.GenerateEarError'">eInfo</throw>
				</catch>
			  </try>
		  </sequence>
		  <else>
			  <log level='myLogLevel'>'EAR file %s for build %s already exists media server' % (earFile,buildSelected)</log>
		  </else>
		</if>
								  
	  <!-- Copy EAR file to the target machine Automation temp dir?-->
	  <script>earCheckDirStrip = earCheckDir.replace('/bpmmedia','')</script>
      <call function="'cafGetMediaFromRepository'">target,earCheckDirStrip,earFile,'STAF','no','','','/bpmmedia'</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
		  <log level="'error'">'Failed to copy the %s file from media Server to Automation Temp Dir on target. Error: %s' % (earFile,callResult)</log>
      </if>
		  
	 
	  <!--******************** Install EAR Section ****************************** -->
	  <try>
		<call function="'wasInstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,AutomationTmpDir,\
			earFile,myApplName,'yes',myModelName,myVersion,myThreadSetting</call>
		<catch exception="'...'" var="eInfo">
			<throw exception="'MonitorAutoException.OrderItem.InstallEarError'">eInfo</throw>
		</catch>
	  </try>	 
	  
	  <!-- Mark EAR installed so we can uninstall in case of any other error -->
	  <script>earGotInstalled = 'true'</script>
		  
	  <!--******************** Send OrderItem Batched Events ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',oneEventPath,oneEventFile,'batch',oneCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.OrderItem.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">60000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 60 seconds'</log>
      </if>
	  <!--******************** Validate Operator KPIs Section ********************************** -->
	  <try>
	    <call function="'monValidateJunitClass'">target,wasHomeDirectory,profileNameInWas,operValidPath,operValidFile,myVersion</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.OrderItem.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	 
	  <!-- ******************* Validate Function KPIs Section ******************************************** -->
	  <try>
	    <call function="'monValidateJunitClass'">target,wasHomeDirectory,profileNameInWas,funcValidPath,funcValidFile,myVersion</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.OrderItem.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>  
	  <!-- *********************Run RFT Validation********************************************* -->
	  <!-- If runPortalDash = on call mon_runPortalRFTTest -->
	  <if expr="runPortalDash == 'on'">
		 <try>
	       <call function="'mon_callPortalRFT_All'">target,portalHostname,portalWASInstallLocation,releaseLevel,portalUser,portalPass,browserSelect,portalScript</call>
	       <catch exception="'...'" var="eInfo">
		     <throw exception="'MonitorAutoException.OrderItem.PortalDashError'">eInfo</throw>
	       </catch>  
	     </try>  
	  </if>
	  <!-- If runBspaceDash = on call mon_runBusinessRFTTest -->	  
	  <if expr="runBspaceDash == 'on'">
		  <try>
			  <call function="'mon_callBusinessRFT_All'">target,wasHomeDirectory,releaseLevel,isMonSecurity,hostPort,browserSelect,busScript,monUser,monPass</call>
			  <catch exception="'...'" var="eInfo">
				  <throw exception="'MonitorAutoException.OrderItem.BSpaceDashError'">eInfo</throw>
			  </catch>
		  </try>
	  </if>
		  
	  <!-- Ideally top level call would like to return nothing...exceptions catch rest -->
			
	  <return>0</return>
	  	
	  </sequence>
		
	  <!-- ################################### Begin exception handlers ###################################################### -->

      <catch exception="'...'" var="eInfo">
		<sequence>
			<script>testFail = 'true'</script>
			<rethrow/>
		</sequence>
      </catch>

      <!-- ################################### End exception handlers ######################################################### -->
	  <!-- Uninstall EAR, IF it got installed in finally block -->
	  <finally>
	    <sequence>
		  <!-- make sure it was installed -->
		  <if expr="earGotInstalled == 'true' and uninstallModel == 'on'">
			 <sequence>
			 <!-- If target is Windows -->
			 
			     <try>
				   <call function="'wasUninstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,myApplName,myModelName,myVersion</call>
				   <catch exception="'...'" var="eInfo">
					  <log level="'error'">'Error uninstalling EAR. May have to manually clean before running another test. Error Info: %s' % (eInfo)</log>
				   </catch>
			     </try>	
		     
			</sequence>  
		  </if>
		  <if expr="testFail == 'true'">
			  <!-- Collect was Runtime logs on Failure -->
			  <call function="'mon_gatherWASRuntimeLogs'">target,wasHomeDirectory,profileNameInWas,'%s_FAIL' % (myName)</call>
		  </if>
        <log level='myLogLevel'>'Ending the %s test' % (myName)</log>  
		</sequence>		  
	  </finally>	
			
    </try>
	  
  </function>
	
  <!-- ****************************************************************** -->
  <!--                      mon_TestPatientVisit_All                      -->
  <!--                                                                    -->
  <!--                                                                    -->
  <!-- ****************************************************************** -->

  <function name="mon_TestPatientVisit_All" scope="local">
    <function-prolog>
      This function will run the PatientVisit model test, it will:
		generate an EAR for the build thats passed (the build thats on the target)
		sends some pre bactched events
		and validates that the correct values reside in monitor through REST services
		
		Throws :
		
		MonitorAutoException.Patvisit.AutomationError
		MonitorAutoException.Patvisit.InstallEarError
		MonitorAutoException.Patvisit.GenerateEarError
		MonitorAutoException.Patvisit.SendEventError
		MonitorAutoException.Patvisit.ValidateError
		MonitorAutoExcpetion.Patvisit.DashboardError
    </function-prolog>

    <function-epilog>
      <![CDATA[
<p>This is the PatientVisit test function</p>
<p>This function will run the PatientVisit automation test </p>
<p>It will do the following:</p>
<ul>
	<li>install an EAR to a monitor installation</li>
	<li>send pre-made batched events</li>
	<li>validate the events were processed and correct values in metric through REST Services<li>	  
</ul>
<p>this is another paragraph...</p>
      ]]>
    </function-epilog>

    <function-map-args>
      <function-required-arg name="target">Hostname/IP address of the target machine</function-required-arg>
	  <function-required-arg name="buildPath">build level to generate EAR for (build that resides on target)</function-required-arg>
      <function-required-arg name="wasHomeDirectory">Location of was directory on target</function-required-arg>
	  <function-required-arg name="wasServerName">Name of the WAS Server monitor profile runs under</function-required-arg>
      <function-required-arg name="profileNameInWas">monitor profile name</function-required-arg>
	  <function-required-arg name="isMonSecurity">is Monitor Security enabled true/false</function-required-arg>
	  <function-required-arg name="runPortalDash">on or off selection, will run Portal Dashboard test</function-required-arg>
	  <function-required-arg name="runBspaceDash">on or off selection, will run Business Space Dashboard Test</function-required-arg>
	  <function-required-arg name="uninstallModel">Will Uninstall Model at the completion of test</function-required-arg>
	  <function-optional-arg name="portalHostname">hostname/ip of the Portal machine</function-optional-arg>
	  <function-optional-arg name="portalWASInstallLocation">Where the WAS running Portal is installed</function-optional-arg>
	  <function-optional-arg name="portalUser">username for Portal user</function-optional-arg>
	  <function-optional-arg name="portalPass">password for Portal user</function-optional-arg>
	  <function-optional-arg name="monUser">monitor user for security</function-optional-arg>
	  <function-optional-arg name="monPass">monitor pasword for security</function-optional-arg>
	  <function-optional-arg name="browserSelect">valid values are "Mozilla Firefox" or "Internet Explorer"</function-optional-arg>				
    </function-map-args>
	
    <try>
		
	  <sequence>	  
	  <!-- Local Variables -->	  
      <script>myLogLevel="User7"</script>
	  <script>testFail = 'false'</script>
	  <!-- ************************************************************************* -->
	  <!-- ****************** Model Specific Variables ***************************** -->
	  <!-- ************************************************************************* -->	  
	  <!-- STAX Testcase name i.e direcotry we store it under -->
	  <script>myName="patvisit01"</script>
	  <script>myPIFile="PatientVisit_677_Automation_12208.zip"</script>
	  <script>myApplName='PatientVisitApplication'</script>
	  <script>myModelName='PatientVisit'</script>
	  <script>myThreadSetting='SerialMT'</script>
	  <script>myVersion='20071115125926'</script>
	  <script>eventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>eventFile = 'PV_LI677Style.xml'</script>
	  <script>eventCount = 32</script>
	  <script>patValidName = 'ValidatePatVisit677'</script>
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <script>earGotInstalled = 'false'</script>
		  	  
	  <!-- Remove the /mnt from the buildPath before using it -->
	  <script>buildPath = buildPath.replace('/mnt','')</script>
	  <log level='myLogLevel'>'The media repository location of build is : %s' % (buildPath)</log>
	
	  <!-- extract Build Selected from Path -->
      <script> 
		split = buildPath.split('CDMON/')
		buildSelected = split[-1] 
	  </script>
	  <!-- determine RELEASE from BuildPath -->
	  <script>split = buildPath.split('monitor_builds/')</script>
	  <script>split2 = split[-1].split('/')</script>	
	  <script>releaseLevel = split2[0]</script>
		  
	  <!-- Determine the correct Portal script -->
	  <if expr="releaseLevel == 'MON61.CDMON'">
	 	<script>portalScript = 'testcases.models.patient.InstanceMetricValidation'</script>
	  </if>
	  <if expr="releaseLevel == 'MON62.CDMON'">
	 	  <script>portalScript = 'scripts.portal.bvt.PatientVist'</script>
	  </if>
		  
	  <!-- Determine the correct BSpace Script -->
	  <!-- dont know the name for 62 BusSpace script yet, this is MON61.CDMON -->
	  <if expr="releaseLevel == 'MON61.CDMON'">
		  <script>busScript = 'scripts.busspace.bvt.PatientVist'</script>
	  </if>
	  <if expr="releaseLevel == 'MON62.CDMON'">
		  <script>busScript = 'scripts.busspace.bvt.PatientVist'</script>
	  </if>
		  
      <!-- Starting the important part -->
      <log level='myLogLevel'>'Starting the %s test' % (myName)</log>		
				 
      <!-- Import the commonLibrary -->		
      <script>libraryLoc="BTT_Sandbox/commonLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.Patvisit.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		 
	  <!-- Load the rftHelperLibrary.xml -->
	  <script>libraryLoc="BTT_Sandbox/rftHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.Patvisit.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Load the miscHelperLibarary.xml -->
	  <script>libraryLoc="bpm/monitor/miscHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		<throw exception="'MonitorAutoException.Patvisit.AutomationError'">'Failed to Import the necessary library %s for this function.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Import the CUSTOM helper library -->
	  <script>libraryLoc="BTT_Sandbox/wasHelperLibrary.xml"</script> 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.Patvisit.AutomationError'">'Failed to Import the necessary library %s needed for this function' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Determine the wasprops WC_defaulthost port -->
	  <call function="'wasGetPort'">target,wasHomeDirectory,profileNameInWas,'WC_defaulthost'</call>
	  <script>(callRC,callResult) = STAXResult</script>
	  <if expr="callRC != 0">
          <throw exception="'MonitorAutoException.Patvisit.PortError'">'%s' % (callResult)</throw>
		  <else>
			  <script>hostPort = callResult</script>
		  </else>
      </if>
		  
	  <!-- Resolve the hostname of the media server -->
      <call function="'cafResolveLAVar'">'Config/mediaServer'</call>
      <script>mediaServer = STAXResult</script>
		  
	  <!--******************** Generate EAR Section ****************************** -->
		  
	  <!-- Directory on media Server to check for existing ear -->
	  <script>earCheckDir = '/bpmmedia/monitor_tests/%s/ears/%s' % (myName,buildSelected)</script>
	  <script>earFile = '%sEAR.ear' % (myName)</script>
	  <script>earCheckFull = '%s/%s' % (earCheckDir,earFile)</script>
		   	     
	  <!-- check to see if we have the EAR we need already...if not call generate EAR -->
	  <call function="'cafQueryFSEntry'">mediaServer,earCheckFull</call>
        <script>(callRC,callResult) = STAXResult</script>
        <if expr="callRC != 0">
		  <sequence>
			  <log level='myLogLevel'>'EAR file is needed..calling generate function'</log>
			  <!-- Calling Generate EAR -->
			  <try>	  
				<call function="'mon_GenerateEar_Linux'">target,buildPath,myPIFile,myName</call>
				<catch exception="'...'" var="eInfo">
					<throw exception="'MonitorAutoException.Patvisit.GenerateEarError'">eInfo</throw>
				</catch>
			  </try>
		  </sequence>
		  <else>
			  <log level='myLogLevel'>'EAR file %s for build %s already exists media server' % (earFile,buildSelected)</log>
		  </else>
		</if>
								  
	  <!-- Copy EAR file to the target machine Automation temp dir?-->
	  <script>earCheckDirStrip = earCheckDir.replace('/bpmmedia','')</script>
      <call function="'cafGetMediaFromRepository'">target,earCheckDirStrip,earFile,'STAF','no','','','/bpmmedia'</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
		  <log level="'error'">'Failed to copy the %s file from media Server to Automation Temp Dir on target. Error: %s' % (earFile,callResult)</log>
      </if>
		  
	 
	  <!--******************** Install EAR Section ****************************** -->
	  <try>
		<call function="'wasInstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,AutomationTmpDir,\
			earFile,myApplName,'yes',myModelName,myVersion,myThreadSetting</call>
		<catch exception="'...'" var="eInfo">
			<throw exception="'MonitorAutoException.Patvisit.InstallEarError'">eInfo</throw>
		</catch>
	  </try>	
	  
	  <!-- Mark EAR installed so we can uninstall in case of any other error -->
	  <script>earGotInstalled = 'true'</script>
		  
	  <!--******************** Send BevMon_001 Event ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,eventFile,'batch',eventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.Patvisit.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">120000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 120 seconds'</log>
      </if>
	  <!--******************** Validate BevMon_001 Section ********************************** -->
	  <try>
	    <call function="'monValidateRest'">target,wasHomeDirectory,profileNameInWas,patValidName,myVersion</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.Patvisit.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	 
	  <!-- *********************Run RFT Validation********************************************* -->
	  <!-- If runPortalDash = on call mon_runPortalRFTTest -->
	  <if expr="runPortalDash == 'on'">
		 <try>
	       <call function="'mon_callPortalRFT_All'">target,portalHostname,portalWASInstallLocation,releaseLevel,portalUser,portalPass,browserSelect,portalScript</call>
	       <catch exception="'...'" var="eInfo">
		     <throw exception="'MonitorAutoException.PatVisit.PortalDashError'">eInfo</throw>
	       </catch>  
	     </try>  
	  </if>
	  <!-- If runBspaceDash = on call mon_runBusinessRFTTest -->	  
	  <if expr="runBspaceDash == 'on'">
		  <try>
			  <call function="'mon_callBusinessRFT_All'">target,wasHomeDirectory,releaseLevel,isMonSecurity,hostPort,browserSelect,busScript,monUser,monPass</call>
			  <catch exception="'...'" var="eInfo">
				  <throw exception="'MonitorAutoException.PatVisit.BSpaceDashError'">eInfo</throw>
			  </catch>
		  </try>
	  </if>
		  
	  <!-- Ideally top level call would like to return nothing...exceptions catch rest -->
			
	  <return>0</return>
	  	
	  </sequence>
		
	  <!-- ################################### Begin exception handlers ###################################################### -->

      <catch exception="'...'" var="eInfo">
		<sequence>
			<script>testFail = 'true'</script>
			<rethrow/>
		</sequence>
      </catch>

      <!-- ################################### End exception handlers ######################################################### -->
	  
	  <!-- Uninstall EAR, IF it got installed in finally block -->
	  <finally>
	    <sequence>
		  <!-- make sure it was installed -->
		  <if expr="earGotInstalled == 'true' and uninstallModel == 'on'">
			 <sequence>
			 <!-- If target is Windows -->
			 
			     <try>
				   <call function="'wasUninstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,myApplName,myModelName,myVersion</call>
				   <catch exception="'...'" var="eInfo">
					  <log level="'error'">'Error uninstalling EAR. May have to manually clean before running another test. Error Info: %s' % (eInfo)</log>
				   </catch>
			     </try>	
			</sequence>  
		  </if>
		  <if expr="testFail == 'true'">
			  <!-- Collect was Runtime logs on Failure -->
			  <call function="'mon_gatherWASRuntimeLogs'">target,wasHomeDirectory,profileNameInWas,'%s_FAIL' % (myName)</call>
		  </if>
        <log level='myLogLevel'>'Ending the %s test' % (myName)</log>  
		</sequence>		  
	  </finally>	
			
    </try>
  </function>
	
  <!-- ****************************************************************** -->
  <!--                      mon_TestCodegen003_All                        -->
  <!--                                                                    -->
  <!--                                                                    -->
  <!-- ****************************************************************** -->

  <function name="mon_TestCodegen003_All" scope="local">
    <function-prolog>
       This function will run the codegen003 model test, it will:
		generate an EAR for the build thats passed (the build thats on the target)
		sends some pre bactched events
		and validates that the correct values reside in monitor through REST services
		
		Throws :
		
		MonitorAutoException.cdg03.AutomationError
		MonitorAutoException.cdg03.InstallEarError
		MonitorAutoException.cdg03.GenerateEarError
		MonitorAutoException.cdg03.SendEventError
		MonitorAutoException.cdg03.ValidateError
		
    </function-prolog>

    <function-epilog>
      <![CDATA[
<p>This is the Codegen003 (CDG003) test function</p>
<p>This function will run the Codegen003 (CDG003) automation test </p>
<p>It will do the following:</p>
<ul>
	<li>install an EAR to a monitor installation</li>
	<li>send pre-made batched events</li>
	<li>validate the events were processed and correct values in metric through REST Services<li>	  
</ul>
<p>this is another paragraph...</p>
      ]]>
    </function-epilog>

    <function-map-args>
      <function-required-arg name="target">Hostname/IP address of the target machine</function-required-arg>
	  <function-required-arg name="buildPath">build level to generate EAR for (build that resides on target)</function-required-arg>
      <function-required-arg name="wasHomeDirectory">Location of was directory on target</function-required-arg>
	  <function-required-arg name="wasServerName">Name of the WAS Server monitor profile runs under</function-required-arg>
      <function-required-arg name="profileNameInWas">monitor profile name</function-required-arg>				
    </function-map-args>
	
    <try>
		
	  <sequence>
		
		  
	  <!-- Local Variables -->	  
      <script>myLogLevel="User7"</script>
	  <script>testFail = 'false'</script>
	  <!-- ************************************************************************* -->
	  <!-- ****************** Model Specific Variables ***************************** -->
	  <!-- ************************************************************************* -->	  
	  <!-- STAX Testcase name i.e direcotry we store it under -->
	  <script>myName="cdg03"</script>
	  <script>myPIFile="CDG003cbe.zip"</script>
	  <script>myApplName='ncApplication'</script>
	  <script>myModelName='nc'</script>
	  <script>myThreadSetting='SerialST'</script>
	  <script>myVersion='20070424135750'</script>
	  <script>eventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>incEventFile = 'incrementEvent.xml'</script>
	  <script>incEventCount = 3</script>
	  <script>decEventFile = 'decrementEvent.xml'</script>
	  <script>decEventCount = 2</script>
	  <script>zeroEventFile = 'settozeroEvent.xml'</script>
	  <script>zeroEventCount = 1</script>
	  <script>metricName = 'theCounter'</script>
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <script>earGotInstalled = 'false'</script>
		  	  
	  <!-- Remove the /mnt from the buildPath before using it -->
	  <script>buildPath = buildPath.replace('/mnt','')</script>
	  <log level='myLogLevel'>'The media repository location of build is : %s' % (buildPath)</log>
	
	   <!-- extract Build Selected from Path -->
        <script> 
			split = buildPath.split('CDMON/')
			buildSelected = split[-1] 
		</script>
		  
      <!-- Starting the important part -->
      <log level='myLogLevel'>'Starting the %s test' % (myName)</log>		
				 
      <!-- Import the commonLibrary -->		
      <script>libraryLoc="BTT_Sandbox/commonLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.cdg03.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Load the miscHelperLibarary.xml -->
	  <script>libraryLoc="bpm/monitor/miscHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		<throw exception="'MonitorAutoException.cdg03.AutomationError'">'Failed to Import the necessary library %s for this function.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Resolve the hostname of the media server -->
      <call function="'cafResolveLAVar'">'Config/mediaServer'</call>
      <script>mediaServer = STAXResult</script>
		  
	  <!--******************** Generate EAR Section ****************************** -->
		  
	  <!-- Directory on media Server to check for existing ear -->
	  <script>earCheckDir = '/bpmmedia/monitor_tests/%s/ears/%s' % (myName,buildSelected)</script>
	  <script>earFile = '%sEAR.ear' % (myName)</script>
	  <script>earCheckFull = '%s/%s' % (earCheckDir,earFile)</script>
		   	     
	  <!-- check to see if we have the EAR we need already...if not call generate EAR -->
	  <call function="'cafQueryFSEntry'">mediaServer,earCheckFull</call>
        <script>(callRC,callResult) = STAXResult</script>
        <if expr="callRC != 0">
		  <sequence>
			  <log level='myLogLevel'>'EAR file is needed..calling generate function'</log>
			  <!-- Calling Generate EAR -->
			  <try>	  
				<call function="'mon_GenerateEar_Linux'">target,buildPath,myPIFile,myName</call>
				<catch exception="'...'" var="eInfo">
					<throw exception="'MonitorAutoException.cdg03.GenerateEarError'">eInfo</throw>
				</catch>
			  </try>
		  </sequence>
		  <else>
			  <log level='myLogLevel'>'EAR file %s for build %s already exists media server' % (earFile,buildSelected)</log>
		  </else>
		</if>
								  
	  <!-- Copy EAR file to the target machine Automation temp dir?-->
	  <script>earCheckDirStrip = earCheckDir.replace('/bpmmedia','')</script>
      <call function="'cafGetMediaFromRepository'">target,earCheckDirStrip,earFile,'STAF','no','','','/bpmmedia'</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
		  <log level="'error'">'Failed to copy the %s file from media Server to Automation Temp Dir on target. Error: %s' % (earFile,callResult)</log>
      </if>
		  
	 
	  <!--******************** Install EAR Section ****************************** -->
  	  <try>
		<call function="'wasInstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,AutomationTmpDir,\
			earFile,myApplName,'yes',myModelName,myVersion,myThreadSetting</call>
		<catch exception="'...'" var="eInfo">
			<throw exception="'MonitorAutoException.cdg03.InstallEarError'">eInfo</throw>
		</catch>
	  </try>	
	  
	  <!-- Mark EAR installed so we can uninstall in case of any other error -->
	  <script>earGotInstalled = 'true'</script>
		  
	  <!--******************** Send Increment Event 3 times ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,incEventFile,'single',incEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg03.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30 seconds'</log>
      </if>
	  <!--******************** Validate theCounter Section ********************************** -->
	  <!-- counter should be 3 -->
	  <script>metricValue = '3'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-IncrementTest' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg03.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	
	  <!--******************** Send decrement Event 2 times ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,decEventFile,'single',decEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg03.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30 seconds'</log>
      </if>
	  <!--******************** Validate theCounter Section ********************************** -->
	  <!-- counter should be 1 -->
	  <script>metricValue = '1'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-DecrementTest' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg03.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	  
	  <!--******************** Send settozero Event 1 time ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,zeroEventFile,'single',zeroEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg03.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30 seconds'</log>
      </if>
	  <!--******************** Validate theCounter Section ********************************** -->
	  <!-- counter should be 1 -->
	  <script>metricValue = '0'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-SetToZeroTest' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg03.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	  
	  
	  <!-- Ideally top level call would like to return nothing...exceptions catch rest -->
			
	  <return>0</return>
	  	
	  </sequence>
		
	  <!-- ################################### Begin exception handlers ###################################################### -->

      <catch exception="'...'" var="eInfo">
		<sequence>
			<script>testFail = 'true'</script>
			<rethrow/>
		</sequence>
      </catch>

      <!-- ################################### End exception handlers ######################################################### -->
	  
	  <!-- Uninstall EAR, IF it got installed in finally block -->
	  <finally>
	    <sequence>
		  <!-- make sure it was installed -->
		  <if expr="earGotInstalled == 'true'">
			 <sequence>
			 <!-- If target is Windows -->
			     <try>
				   <call function="'wasUninstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,myApplName,myModelName,myVersion</call>
				   <catch exception="'...'" var="eInfo">
					  <log level="'error'">'Error uninstalling EAR. May have to manually clean before running another test. Error Info: %s' % (eInfo)</log>
				   </catch>
			     </try>	
			</sequence>  
		  </if>
		  <if expr="testFail == 'true'">
			  <!-- Collect was Runtime logs on Failure -->
			  <call function="'mon_gatherWASRuntimeLogs'">target,wasHomeDirectory,profileNameInWas,'%s_FAIL' % (myName)</call>
		  </if>
        <log level='myLogLevel'>'Ending the %s test' % (myName)</log>  
		</sequence>		  
	  </finally>	
			
    </try>
  </function>
	
  <!-- ****************************************************************** -->
  <!--                      mon_TestCodegen005_All                        -->
  <!--                                                                    -->
  <!--                                                                    -->
  <!-- ****************************************************************** -->

  <function name="mon_TestCodegen005_All" scope="local">
    <function-prolog>
      This function will run the codegen005 model test, it will:
		generate an EAR for the build thats passed (the build thats on the target)
		sends some pre bactched events
		and validates that the correct values reside in monitor through REST services
		
		Throws :
		
		MonitorAutoException.cdg05.AutomationError
		MonitorAutoException.cdg05.InstallEarError
		MonitorAutoException.cdg05.GenerateEarError
		MonitorAutoException.cdg05.SendEventError
		MonitorAutoException.cdg05.ValidateError
    </function-prolog>

    <function-epilog>
      <![CDATA[
<p>This is the Codegen005 (CDG005) test function</p>
<p>This function will run the Codegen005 (CDG005) automation test </p>
<p>It will do the following:</p>
<ul>
	<li>install an EAR to a monitor installation</li>
	<li>send pre-made batched events</li>
	<li>validate the events were processed and correct values in metric through REST Services<li>	  
</ul>
<p>this is another paragraph...</p>
      ]]>
    </function-epilog>

    <function-map-args>
      <function-required-arg name="target">Hostname/IP address of the target machine</function-required-arg>
	  <function-required-arg name="buildPath">build level to generate EAR for (build that resides on target)</function-required-arg>
      <function-required-arg name="wasHomeDirectory">Location of was directory on target</function-required-arg>
	  <function-required-arg name="wasServerName">Name of the WAS Server monitor profile runs under</function-required-arg>
      <function-required-arg name="profileNameInWas">monitor profile name</function-required-arg>				
    </function-map-args>
	
    <try>
		
	  <sequence>
		
		  
	  <!-- Local Variables -->	  
      <script>myLogLevel="User7"</script>
	  <script>testFail = 'false'</script>
	  <!-- ************************************************************************* -->
	  <!-- ****************** Model Specific Variables ***************************** -->
	  <!-- ************************************************************************* -->	  
	  <!-- STAX Testcase name i.e direcotry we store it under -->
	  <script>myName="cdg05"</script>
	  <script>myPIFile="CDG005cbe.zip"</script>
	  <script>myApplName='ntApplication'</script>
	  <script>myModelName='nt'</script>
	  <script>myThreadSetting='SerialST'</script>
	  <script>myVersion='20070424142103'</script>
	  <script>eventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>startEventFile = 'startCDG005.xml'</script>
	  <script>startEventCount = 1</script>
	  <script>metricName = 'theCounter'</script>
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <script>earGotInstalled = 'false'</script>
		  	  
	  <!-- Remove the /mnt from the buildPath before using it -->
	  <script>buildPath = buildPath.replace('/mnt','')</script>
	  <log level='myLogLevel'>'The media repository location of build is : %s' % (buildPath)</log>
	
	   <!-- extract Build Selected from Path -->
        <script> 
			split = buildPath.split('CDMON/')
			buildSelected = split[-1] 
		</script>
		  
      <!-- Starting the important part -->
      <log level='myLogLevel'>'Starting the %s test' % (myName)</log>		
				 
      <!-- Import the commonLibrary -->		
      <script>libraryLoc="BTT_Sandbox/commonLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
		 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.cdg05.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Load the miscHelperLibarary.xml -->
	  <script>libraryLoc="bpm/monitor/miscHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
		 
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		<throw exception="'MonitorAutoException.cdg05.AutomationError'">'Failed to Import the necessary library %s for this function.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Resolve the hostname of the media server -->
      <call function="'cafResolveLAVar'">'Config/mediaServer'</call>
      <script>mediaServer = STAXResult</script>
		  
	  <!--******************** Generate EAR Section ****************************** -->
		  
	  <!-- Directory on media Server to check for existing ear -->
	  <script>earCheckDir = '/bpmmedia/monitor_tests/%s/ears/%s' % (myName,buildSelected)</script>
	  <script>earFile = '%sEAR.ear' % (myName)</script>
	  <script>earCheckFull = '%s/%s' % (earCheckDir,earFile)</script>
		   	     
	  <!-- check to see if we have the EAR we need already...if not call generate EAR -->
	  <call function="'cafQueryFSEntry'">mediaServer,earCheckFull</call>
        <script>(callRC,callResult) = STAXResult</script>
        <if expr="callRC != 0">
		  <sequence>
			  <log level='myLogLevel'>'EAR file is needed..calling generate function'</log>
			  <!-- Calling Generate EAR -->
			  <try>	  
				<call function="'mon_GenerateEar_Linux'">target,buildPath,myPIFile,myName</call>
				<catch exception="'...'" var="eInfo">
					<throw exception="'MonitorAutoException.cdg05.GenerateEarError'">eInfo</throw>
				</catch>
			  </try>
		  </sequence>
		  <else>
			  <log level='myLogLevel'>'EAR file %s for build %s already exists media server' % (earFile,buildSelected)</log>
		  </else>
		</if>
								  
	  <!-- Copy EAR file to the target machine Automation temp dir?-->
	  <script>earCheckDirStrip = earCheckDir.replace('/bpmmedia','')</script>
      <call function="'cafGetMediaFromRepository'">target,earCheckDirStrip,earFile,'STAF','no','','','/bpmmedia'</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
		  <log level="'error'">'Failed to copy the %s file from media Server to Automation Temp Dir on target. Error: %s' % (earFile,callResult)</log>
      </if>
		  
	 
	  <!--******************** Install EAR Section ****************************** -->
	  <try>
		<call function="'wasInstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,AutomationTmpDir,\
			earFile,myApplName,'yes',myModelName,myVersion,myThreadSetting</call>
		<catch exception="'...'" var="eInfo">
			<throw exception="'MonitorAutoException.cdg05.InstallEarError'">eInfo</throw>
		</catch>
	  </try>	
	  <!-- Mark EAR installed so we can uninstall in case of any other error -->
	  <script>earGotInstalled = 'true'</script>
		  
	  <!--******************** Send Start Event 1st time ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,startEventFile,'single',startEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg05.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30 seconds'</log>
      </if>
	  <!--******************** Validate theCounter Section ********************************** -->
	  <!-- counter should be 1 -->
	  <script>metricValue = '1'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-firstEvent' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg05.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	
	  <!--******************** Send start Event 2nd time ************************************ -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,startEventFile,'single',startEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg05.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30 seconds'</log>
      </if>
	  <!--******************** Validate theCounter Section ********************************** -->
	  <!-- counter should be 2 -->
	  <script>metricValue = '2'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-secondEvent' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg05.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	  
	  <!--******************** Send start Event 3rd time ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,startEventFile,'single',startEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg05.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30 seconds'</log>
      </if>
	  <!--******************** Validate theCounter Section ********************************** -->
	  <!-- counter should be 3 -->
	  <script>metricValue = '3'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-thirdEvent' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg05.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	  
	  
	  <!-- Ideally top level call would like to return nothing...exceptions catch rest -->
			
	  <return>0</return>
	  	
	  </sequence>
		
	  <!-- ################################### Begin exception handlers ###################################################### -->

      <catch exception="'...'" var="eInfo">
		<sequence>
			<script>testFail = 'true'</script>
			<rethrow/>
		</sequence>
      </catch>

      <!-- ################################### End exception handlers ######################################################### -->
	  
	  <!-- Uninstall EAR, IF it got installed in finally block -->
	  <finally>
	    <sequence>
		  <!-- make sure it was installed -->
		  <if expr="earGotInstalled == 'true'">
			 <sequence>
			     <try>
				   <call function="'wasUninstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,myApplName,myModelName,myVersion</call>
				   <catch exception="'...'" var="eInfo">
					  <log level="'error'">'Error uninstalling EAR. May have to manually clean before running another test. Error Info: %s' % (eInfo)</log>
				   </catch>
			     </try>	
			</sequence>  
		  </if>
		  <if expr="testFail == 'true'">
			  <!-- Collect was Runtime logs on Failure -->
			  <call function="'mon_gatherWASRuntimeLogs'">target,wasHomeDirectory,profileNameInWas,'%s_FAIL' % (myName)</call>
		  </if>
        <log level='myLogLevel'>'Ending the %s test' % (myName)</log>  
		</sequence>		  
	  </finally>	
			
    </try>
  </function>
	
  <!-- ****************************************************************** -->
  <!--                      mon_TestCodegen012_All                        -->
  <!--                                                                    -->
  <!--                                                                    -->
  <!-- ****************************************************************** -->

  <function name="mon_TestCodegen012_All" scope="local">
    <function-prolog>
      This function will run the codegen012 model test, it will:
		generate an EAR for the build thats passed (the build thats on the target)
		sends some pre bactched events
		and validates that the correct values reside in monitor through REST services
		
		Throws :
		
		MonitorAutoException.cdg012.AutomationError
		MonitorAutoException.cdg012.InstallEarError
		MonitorAutoException.cdg012.GenerateEarError
		MonitorAutoException.cdg012.SendEventError
		MonitorAutoException.cdg012.ValidateError
    </function-prolog>

    <function-epilog>
      <![CDATA[
<p>This is the Codegen012 (CDG012) test function</p>
<p>This function will run the Codegen005 (CDG012) automation test </p>
<p>It will do the following:</p>
<ul>
	<li>install an EAR to a monitor installation</li>
	<li>send pre-made batched events</li>
	<li>validate the events were processed and correct values in metric through REST Services<li>	  
</ul>
<p>this is another paragraph...</p>
      ]]>
    </function-epilog>

    <function-map-args>
      <function-required-arg name="target">Hostname/IP address of the target machine</function-required-arg>
	  <function-required-arg name="buildPath">build level to generate EAR for (build that resides on target)</function-required-arg>
      <function-required-arg name="wasHomeDirectory">Location of was directory on target</function-required-arg>
	  <function-required-arg name="wasServerName">Name of the WAS Server monitor profile runs under</function-required-arg>
      <function-required-arg name="profileNameInWas">monitor profile name</function-required-arg>				
    </function-map-args>
	
    <try>
		
	  <sequence>
		
		  
	  <!-- Local Variables -->	  
      <script>myLogLevel="User7"</script>
	  <script>testFail = 'false'</script>
	  <!-- ************************************************************************* -->
	  <!-- ****************** Model Specific Variables ***************************** -->
	  <!-- ************************************************************************* -->	  
	  <!-- STAX Testcase name i.e direcotry we store it under -->
	  <script>myName="cdg12"</script>
	  <script>myPIFile="CDG012cbe.zip"</script>
	  <script>myApplName='ctApplication'</script>
	  <script>myModelName='ct'</script>
	  <script>myThreadSetting='SerialST'</script>
	  <script>myVersion='20070424210622'</script>
	  <script>eventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>startEventFile = 'startCDG012.xml'</script>
	  <script>startEventCount = 1</script>
	  <script>metricName = 'metric1'</script>
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <script>earGotInstalled = 'false'</script>
		  	  
	  <!-- Remove the /mnt from the buildPath before using it -->
	  <script>buildPath = buildPath.replace('/mnt','')</script>
	  <log level='myLogLevel'>'The media repository location of build is : %s' % (buildPath)</log>
	
	   <!-- extract Build Selected from Path -->
        <script> 
			split = buildPath.split('CDMON/')
			buildSelected = split[-1] 
		</script>
		  
      <!-- Starting the important part -->
      <log level='myLogLevel'>'Starting the %s test' % (myName)</log>		
				 
      <!-- Import the commonLibrary -->		
      <script>libraryLoc="BTT_Sandbox/commonLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.cdg012.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Load the miscHelperLibarary.xml -->
	  <script>libraryLoc="bpm/monitor/miscHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		<throw exception="'MonitorAutoException.cdg012.AutomationError'">'Failed to Import the necessary library %s for this function.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Resolve the hostname of the media server -->
      <call function="'cafResolveLAVar'">'Config/mediaServer'</call>
      <script>mediaServer = STAXResult</script>
		  
	  <!--******************** Generate EAR Section ****************************** -->
		  
	  <!-- Directory on media Server to check for existing ear -->
	  <script>earCheckDir = '/bpmmedia/monitor_tests/%s/ears/%s' % (myName,buildSelected)</script>
	  <script>earFile = '%sEAR.ear' % (myName)</script>
	  <script>earCheckFull = '%s/%s' % (earCheckDir,earFile)</script>
		   	     
	  <!-- check to see if we have the EAR we need already...if not call generate EAR -->
	  <call function="'cafQueryFSEntry'">mediaServer,earCheckFull</call>
        <script>(callRC,callResult) = STAXResult</script>
        <if expr="callRC != 0">
		  <sequence>
			  <log level='myLogLevel'>'EAR file is needed..calling generate function'</log>
			  <!-- Calling Generate EAR -->
			  <try>	  
				<call function="'mon_GenerateEar_Linux'">target,buildPath,myPIFile,myName</call>
				<catch exception="'...'" var="eInfo">
					<throw exception="'MonitorAutoException.cdg012.GenerateEarError'">eInfo</throw>
				</catch>
			  </try>
		  </sequence>
		  <else>
			  <log level='myLogLevel'>'EAR file %s for build %s already exists media server' % (earFile,buildSelected)</log>
		  </else>
		</if>
								  
	  <!-- Copy EAR file to the target machine Automation temp dir?-->
	  <script>earCheckDirStrip = earCheckDir.replace('/bpmmedia','')</script>
      <call function="'cafGetMediaFromRepository'">target,earCheckDirStrip,earFile,'STAF','no','','','/bpmmedia'</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
		  <log level="'error'">'Failed to copy the %s file from media Server to Automation Temp Dir on target. Error: %s' % (earFile,callResult)</log>
      </if>
		  
	 
	  <!--******************** Install EAR Section ****************************** -->
	  <try>
		<call function="'wasInstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,AutomationTmpDir,\
			earFile,myApplName,'yes',myModelName,myVersion,myThreadSetting</call>
		<catch exception="'...'" var="eInfo">
			<throw exception="'MonitorAutoException.cdg012.InstallEarError'">eInfo</throw>
		</catch>
	  </try>	
	
	  <!-- Mark EAR installed so we can uninstall in case of any other error -->
	  <script>earGotInstalled = 'true'</script>
		  
	  <!--******************** Send Start Event 1st time 1 time ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,startEventFile,'single',startEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg012.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30 seconds'</log>
      </if>
	  <!--******************** Validate metric1 Section ********************************** -->
	  <!-- metric should be 2 -->
	  <script>metricValue = '2'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-singleEvent' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg012.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	
	  <!--******************** Send start Event 3 more times ************************************ -->
	  <script>startEventCount = 3</script>
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,startEventFile,'single',startEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg012.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">60000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 60 seconds'</log>
      </if>
	  <!--******************** Validate metric1 Section ********************************** -->
	  <!-- metric should be 16 -->
	  <script>metricValue = '16'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-multipleEvents' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg012.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	  
	  <!-- Ideally top level call would like to return nothing...exceptions catch rest -->
			
	  <return>0</return>
	  	
	  </sequence>
		
	  <!-- ################################### Begin exception handlers ###################################################### -->

      <catch exception="'...'" var="eInfo">
		<sequence>
			<script>testFail = 'true'</script>
			<rethrow/>
		</sequence>
      </catch>

      <!-- ################################### End exception handlers ######################################################### -->
	  
	  <!-- Uninstall EAR, IF it got installed in finally block -->
	  <finally>
	    <sequence>
		  <!-- make sure it was installed -->
		  <if expr="earGotInstalled == 'true'">
			 <sequence>
			     <try>
				   <call function="'wasUninstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,myApplName,myModelName,myVersion</call>
				   <catch exception="'...'" var="eInfo">
					  <log level="'error'">'Error uninstalling EAR. May have to manually clean before running another test. Error Info: %s' % (eInfo)</log>
				   </catch>
			     </try>	 
			</sequence>  
		  </if>
		  <if expr="testFail == 'true'">
			  <!-- Collect was Runtime logs on Failure -->
			  <call function="'mon_gatherWASRuntimeLogs'">target,wasHomeDirectory,profileNameInWas,'%s_FAIL' % (myName)</call>
		  </if>
        <log level='myLogLevel'>'Ending the %s test' % (myName)</log>  
		</sequence>		  
	  </finally>	
			
    </try>
  </function>
	
  <!-- ****************************************************************** -->
  <!--                      mon_TestCodegen015_All                        -->
  <!--                                                                    -->
  <!--                                                                    -->
  <!-- ****************************************************************** -->

  <function name="mon_TestCodegen015_All" scope="local">
    <function-prolog>
       This function will run the codegen015 model test, it will:
		generate an EAR for the build thats passed (the build thats on the target)
		sends some pre bactched events
		and validates that the correct values reside in monitor through REST services
		
		Throws :
		
		MonitorAutoException.cdg015.AutomationError
		MonitorAutoException.cdg015.InstallEarError
		MonitorAutoException.cdg015.GenerateEarError
		MonitorAutoException.cdg015.SendEventError
		MonitorAutoException.cdg015.ValidateError
    </function-prolog>

    <function-epilog>
      <![CDATA[
<p>This is the Codegen015 (CDG015) test function</p>
<p>This function will run the Codegen015 (CDG015) automation test </p>
<p>It will do the following:</p>
<ul>
	<li>install an EAR to a monitor installation</li>
	<li>send pre-made batched events</li>
	<li>validate the events were processed and correct values in metric through REST Services<li>	  
</ul>
<p>this is another paragraph...</p>
      ]]>
    </function-epilog>

    <function-map-args>
      <function-required-arg name="target">Hostname/IP address of the target machine</function-required-arg>
	  <function-required-arg name="buildPath">build level to generate EAR for (build that resides on target)</function-required-arg>
      <function-required-arg name="wasHomeDirectory">Location of was directory on target</function-required-arg>
	  <function-required-arg name="wasServerName">Name of the WAS Server monitor profile runs under</function-required-arg>
      <function-required-arg name="profileNameInWas">monitor profile name</function-required-arg>				
    </function-map-args>
	
    <try>
		
	  <sequence>
		
		  
	  <!-- Local Variables -->	  
      <script>myLogLevel="User7"</script>
	  <script>testFail = 'false'</script>
	  <!-- ************************************************************************* -->
	  <!-- ****************** Model Specific Variables ***************************** -->
	  <!-- ************************************************************************* -->	  
	  <!-- STAX Testcase name i.e direcotry we store it under -->
	  <script>myName="cdg15"</script>
	  <script>myPIFile="CDG015cbe.zip"</script>
	  <script>myApplName='tcApplication'</script>
	  <script>myModelName='tc'</script>
	  <script>myThreadSetting='SerialST'</script>
	  <script>myVersion='20070424214035'</script>
	  <script>eventPath = '/bpmmedia/monitor_tests/%s/events' % (myName)</script>
	  <script>incEventFile = 'incrementEvent.xml'</script>
	  <script>incEventCount = 3</script>
	  <script>decEventFile = 'decrementEvent.xml'</script>
	  <script>decEventCount = 2</script>
	  <script>zeroEventFile = 'settozeroEvent.xml'</script>
	  <script>zeroEventCount = 1</script>
	  <script>metricName = 'theCounter'</script>
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <!-- ************************************************************************* -->
	  <script>earGotInstalled = 'false'</script>
		  	  
	  <!-- Remove the /mnt from the buildPath before using it -->
	  <script>buildPath = buildPath.replace('/mnt','')</script>
	  <log level='myLogLevel'>'The media repository location of build is : %s' % (buildPath)</log>
	
	   <!-- extract Build Selected from Path -->
        <script> 
			split = buildPath.split('CDMON/')
			buildSelected = split[-1] 
		</script>
		  
      <!-- Starting the important part -->
      <log level='myLogLevel'>'Starting the %s test' % (myName)</log>		
				 
      <!-- Import the commonLibrary -->		
      <script>libraryLoc="BTT_Sandbox/commonLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		  <throw exception="'MonitorAutoException.cdg015.AutomationError'">'Failed to Import the necessary library %s for this test.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Load the miscHelperLibarary.xml -->
	  <script>libraryLoc="bpm/monitor/miscHelperLibrary.xml"</script>
      <log level='myLogLevel'>'MJL: Library Location is %s' % (libraryLoc)</log>
      <call function="'cafImportCustomLibrary'"> [libraryLoc] </call>
      <script>importRC = STAXResult</script>
      <if expr="importRC != 0">
		<throw exception="'MonitorAutoException.cdg15.AutomationError'">'Failed to Import the necessary library %s for this function.' % (libraryLoc)</throw>
	  </if>
		  
	  <!-- Resolve the hostname of the media server -->
      <call function="'cafResolveLAVar'">'Config/mediaServer'</call>
      <script>mediaServer = STAXResult</script>
		  
	  <!--******************** Generate EAR Section ****************************** -->
		  
	  <!-- Directory on media Server to check for existing ear -->
	  <script>earCheckDir = '/bpmmedia/monitor_tests/%s/ears/%s' % (myName,buildSelected)</script>
	  <script>earFile = '%sEAR.ear' % (myName)</script>
	  <script>earCheckFull = '%s/%s' % (earCheckDir,earFile)</script>
		   	     
	  <!-- check to see if we have the EAR we need already...if not call generate EAR -->
	  <call function="'cafQueryFSEntry'">mediaServer,earCheckFull</call>
        <script>(callRC,callResult) = STAXResult</script>
        <if expr="callRC != 0">
		  <sequence>
			  <log level='myLogLevel'>'EAR file is needed..calling generate function'</log>
			  <!-- Calling Generate EAR -->
			  <try>	  
				<call function="'mon_GenerateEar_Linux'">target,buildPath,myPIFile,myName</call>
				<catch exception="'...'" var="eInfo">
					<throw exception="'MonitorAutoException.cdg015.GenerateEarError'">eInfo</throw>
				</catch>
			  </try>
		  </sequence>
		  <else>
			  <log level='myLogLevel'>'EAR file %s for build %s already exists media server' % (earFile,buildSelected)</log>
		  </else>
		</if>
								  
	  <!-- Copy EAR file to the target machine Automation temp dir?-->
	  <script>earCheckDirStrip = earCheckDir.replace('/bpmmedia','')</script>
      <call function="'cafGetMediaFromRepository'">target,earCheckDirStrip,earFile,'STAF','no','','','/bpmmedia'</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
		  <log level="'error'">'Failed to copy the %s file from media Server to Automation Temp Dir on target. Error: %s' % (earFile,callResult)</log>
      </if>
		  
	 
	  <!--******************** Install EAR Section ****************************** -->
	  <try>
		<call function="'wasInstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,AutomationTmpDir,\
			earFile,myApplName,'yes',myModelName,myVersion,myThreadSetting</call>
		<catch exception="'...'" var="eInfo">
			<throw exception="'MonitorAutoException.cdg015.InstallEarError'">eInfo</throw>
		</catch>
	  </try>	
		
	  <!-- Mark EAR installed so we can uninstall in case of any other error -->
	  <script>earGotInstalled = 'true'</script>
		  
	  <!--******************** Send Increment Event 3 times ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,incEventFile,'single',incEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg015.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">60000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 60 seconds'</log>
      </if>
	  <!--******************** Validate theCounter Section ********************************** -->
	  <!-- counter should be 3 -->
	  <script>metricValue = '3'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-IncrementTest' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg015.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	
	  <!--******************** Send decrement Event 2 times ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,decEventFile,'single',decEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg015.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">40000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 40 seconds'</log>
      </if>
	  <!--******************** Validate theCounter Section ********************************** -->
	  <!-- counter should be 1 -->
	  <script>metricValue = '1'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-DecrementTest' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg015.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	  
	  <!--******************** Send settozero Event 1 time ******************************** -->
	  <try>
	    <call function="'monEmitEvents'">target,wasHomeDirectory,profileNameInWas,'media',eventPath,zeroEventFile,'single',zeroEventCount</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg015.SendEventError'">eInfo</throw>
	    </catch>  
	  </try>
	  <!-- Allow processing time -->
	  <call function="'cafDelay'">30000</call>
      <script>(callRC) = STAXResult</script>
      <if expr="callRC != 0">
        <log level="'error'">'Failed to delay for 30 seconds'</log>
      </if>
	  <!--******************** Validate theCounter Section ********************************** -->
	  <!-- counter should be 1 -->
	  <script>metricValue = '0'</script>
	  <try>
		
	    <call function="'monValidateMetric'">target,wasHomeDirectory,profileNameInWas,myModelName,myVersion,metricName,metricValue,'%s-SetToZeroTest' % (myName)</call>
	    <catch exception="'...'" var="eInfo">
		    <throw exception="'MonitorAutoException.cdg015.ValidateError'">eInfo</throw>
	    </catch>  
	  </try>	  
	  
	  
	  <!-- Ideally top level call would like to return nothing...exceptions catch rest -->
			
	  <return>0</return>
	  	
	  </sequence>
		
	  <!-- ################################### Begin exception handlers ###################################################### -->

      <catch exception="'...'" var="eInfo">
		<sequence>
			<script>testFail = 'true'</script>
			<rethrow/>
		</sequence>
      </catch>

      <!-- ################################### End exception handlers ######################################################### -->
	  
	  <!-- Uninstall EAR, IF it got installed in finally block -->
	  <finally>
	    <sequence>
		  <!-- make sure it was installed -->
		  <if expr="earGotInstalled == 'true'">
			 <sequence>
		
			     <try>
				   <call function="'wasUninstallEar_All'">target,wasHomeDirectory,wasServerName,profileNameInWas,myApplName,myModelName,myVersion</call>
				   <catch exception="'...'" var="eInfo">
					  <log level="'error'">'Error uninstalling EAR. May have to manually clean before running another test. Error Info: %s' % (eInfo)</log>
				   </catch>
			     </try>	  
			</sequence>  
		  </if>
		  <if expr="testFail == 'true'">
			  <!-- Collect was Runtime logs on Failure -->
			  <call function="'mon_gatherWASRuntimeLogs'">target,wasHomeDirectory,profileNameInWas,'%s_FAIL' % (myName)</call>
		  </if>
        <log level='myLogLevel'>'Ending the %s test' % (myName)</log>  
		</sequence>		  
	  </finally>	
			
    </try>
  </function>

</stax>